<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://javiervidrua.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://javiervidrua.github.io/blog/" rel="alternate" type="text/html" /><updated>2021-09-28T17:53:12+02:00</updated><id>https://javiervidrua.github.io/blog/feed.xml</id><title type="html">Blog</title><subtitle></subtitle><entry><title type="html">Vagrant</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2021/09/28/Vagrant.html" rel="alternate" type="text/html" title="Vagrant" /><published>2021-09-28T00:00:00+02:00</published><updated>2021-09-28T00:00:00+02:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2021/09/28/Vagrant</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2021/09/28/Vagrant.html">&lt;h2 id=&quot;what-is-vagrant&quot;&gt;What is Vagrant&lt;/h2&gt;

&lt;p&gt;Vagrant (by HashiCorp) is a tool that lets you manage and build virtual machine environments in a simple and easy way.&lt;/p&gt;

&lt;p&gt;It lowers the development setup time, increases production parity and completely eliminates the situations where something works on one machine but not on the others.&lt;/p&gt;

&lt;p&gt;It uses virtual machine providers like VMware, VirtualBox or AWS to name a few, and provisioning tools to install and configure the software on the virtual machine.&lt;/p&gt;

&lt;p&gt;For that, it uses a Vagrantfile, which describes the type of machine and the steps to configure it and provision it.&lt;/p&gt;

&lt;p&gt;For provisioning the virtual machines, boxes are used. If you know what Docker is, boxes are like Docker images, that you can download from &lt;a href=&quot;https://app.vagrantup.com/boxes/search&quot;&gt;here&lt;/a&gt; and use for free.&lt;/p&gt;

&lt;p&gt;It allows and makes easy to do cool stuff like folder sharing between the host and the virtual machines.&lt;/p&gt;

&lt;p&gt;For more detailed information, you can check the &lt;a href=&quot;https://www.vagrantup.com/docs&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Check the &lt;a href=&quot;https://www.vagrantup.com/downloads&quot;&gt;official webpage&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;

&lt;p&gt;For more examples, check &lt;a href=&quot;https://learn.hashicorp.com/tutorials/vagrant/getting-started-index?in=vagrant/getting-started&quot;&gt;this&lt;/a&gt; out.&lt;/p&gt;

&lt;h3 id=&quot;initialize-a-virtual-machine&quot;&gt;Initialize a virtual machine&lt;/h3&gt;

&lt;p&gt;The following command will create the Vagrantfile, which contains a default configuration for an Ubuntu bionic system.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant init hashicorp/bionic64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you have a project with a Vagrantfile, you can initialize it by running:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;start-the-virtual-machine&quot;&gt;Start the virtual machine&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;suspend-the-virtual-machine&quot;&gt;Suspend the virtual machine&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant &lt;span class=&quot;nb&quot;&gt;suspend&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;destroy-the-virtual-machine&quot;&gt;Destroy the virtual machine&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;ssh-into-the-machine&quot;&gt;SSH into the machine&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-a-box-to-your-vagrantfile&quot;&gt;Install a box to your Vagrantfile&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add ubuntu/trusty64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;list-the-downloaded-boxes&quot;&gt;List the downloaded boxes&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;remove-a-downloaded-box&quot;&gt;Remove a downloaded box&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box remove ubuntu/trusty64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;folder-sharing&quot;&gt;Folder sharing&lt;/h3&gt;

&lt;p&gt;By default, Vagrant shares your project directory to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt; directory on the guest machine.&lt;/p&gt;

&lt;h3 id=&quot;provision-a-virtual-machine&quot;&gt;Provision a virtual machine&lt;/h3&gt;

&lt;p&gt;You can write the scripts that will be launched when provisioning the virtual machine. For example, the following is a script that will install the Apache web server in the virtual machine and start serving the files on the project directory:&lt;/p&gt;

&lt;p&gt;bootstrap.sh:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
apt-get update
apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; apache2
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; /var/www &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/www
  &lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fs&lt;/span&gt; /vagrant /var/www
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Vagrantfile:&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hashicorp/bionic64&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:shell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bootstrap.sh&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;reload-the-virtual-machine-for-updates-to-the-vagrantfile&quot;&gt;Reload the virtual machine (for updates to the Vagrantfile)&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant reload &lt;span class=&quot;nt&quot;&gt;--provision&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">What is Vagrant</summary></entry><entry><title type="html">Containerizing an Angular web application with Docker</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2021/09/25/Containerizing-an-Angular-web-application-with-Docker.html" rel="alternate" type="text/html" title="Containerizing an Angular web application with Docker" /><published>2021-09-25T00:00:00+02:00</published><updated>2021-09-25T00:00:00+02:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2021/09/25/Containerizing-an-Angular-web-application-with-Docker</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2021/09/25/Containerizing-an-Angular-web-application-with-Docker.html">&lt;h2 id=&quot;description-of-the-project&quot;&gt;Description of the project&lt;/h2&gt;

&lt;p&gt;Deploy an Angular web application in Docker. The Angular web application should be built with the Angular CLI tool and with Docker Compose.&lt;/p&gt;

&lt;h2 id=&quot;steps&quot;&gt;Steps&lt;/h2&gt;

&lt;h3 id=&quot;install-dependencies&quot;&gt;Install dependencies&lt;/h3&gt;

&lt;p&gt;The first step is to install Docker, Docker Compose, Node.js, TypeScript and Angular in our system. To do so, run the following script (tested on a system running Ubuntu 20.04.3):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://get.docker.com &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; get-docker.sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh get-docker.sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;uname&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/local/bin/docker-compose
&lt;span class=&quot;nb&quot;&gt;sudo chmod&lt;/span&gt; +x /usr/local/bin/docker-compose
&lt;span class=&quot;nb&quot;&gt;sudo ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /usr/local/bin/docker-compose /usr/bin/docker-compose
curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://deb.nodesource.com/setup_16.x | &lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-E&lt;/span&gt; bash -
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nodejs
npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;typescript &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-the-angular-web-application&quot;&gt;Create the Angular web application&lt;/h3&gt;

&lt;p&gt;To do so, we’ll use the CLI tool to create a new project and open the browser to the what we’re working with:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ng new angular-application
ng serve &lt;span class=&quot;nt&quot;&gt;--open&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-the-dockerfile&quot;&gt;Create the Dockerfile&lt;/h3&gt;

&lt;p&gt;Now we need to create the Dockerfile. This file will tell Docker to copy the project to the Docker container, build it for production, and install Nginx so we can access the container through port 80.&lt;/p&gt;

&lt;p&gt;Create the file Dockerfile:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###############################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Stage 1: Compile and Build angular codebase&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###############################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use official node image as the base image&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:latest as node&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Set the working directory INSIDE OF THE DOCKER CONTAINER&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /angular-application&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add the source code to app&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./angular-application /angular-application&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install all the dependencies&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Generate the build of the application&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm run build &lt;span class=&quot;nt&quot;&gt;--prod&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;###############################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Stage 2: Serve app with nginx server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;###############################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use official nginx image as the base image&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; nginx:latest&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Copy the build output to replace the default nginx contents.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; --from=node /angular-application/dist/angular-application /usr/share/nginx/html&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Expose port 80&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;create-the-docker-image&quot;&gt;Create the Docker image&lt;/h3&gt;

&lt;p&gt;Now we need to create the Docker image, to see if everything works. To do so, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image build .&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You should see something like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/dockerimagebuild.jpg&quot; alt=&quot;DockerImageBuild&quot; title=&quot;DockerImageBuild&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;create-the-docker-compose-file&quot;&gt;Create the Docker Compose file&lt;/h3&gt;

&lt;p&gt;The next step is to create the Docker Compose file, that will allow us to manage the application and make it scalable and portable.&lt;/p&gt;

&lt;p&gt;Create the file docker-compose.yml:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This file will use the Dockerfile to run a container with that image&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.9&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# build: . will make Docker Compose run 'docker image build .'&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# https://stackoverflow.com/questions/29480099/whats-the-difference-between-docker-compose-vs-dockerfile&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;80:80&quot;&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# If we wanted more services, we'll put them right here&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;#redis:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#image: &quot;redis:alpine&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; and if we go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:80&lt;/code&gt; we’ll be able to see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/angulartemplate.jpg&quot; alt=&quot;AngularTemplate&quot; title=&quot;AngularTemplate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To run the service as a daemon, you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; where &lt;em&gt;-d&lt;/em&gt; stands for &lt;em&gt;detached&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To stop the execution, you can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose stop&lt;/code&gt; or press Ctrl+C if you didn’t start the service as a daemon.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With Docker you can create safer and faster applications, and with Docker Compose you can define and run multi-container applications, making them scalable and portable.&lt;/p&gt;

&lt;p&gt;You can check out the source code in my &lt;a href=&quot;https://github.com/javiervidrua/angularindockerdeployment&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Description of the project</summary></entry><entry><title type="html">Continuous orchestration with Kubernetes</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2021/09/24/Continuous-orchestration-with-kubernetes.html" rel="alternate" type="text/html" title="Continuous orchestration with Kubernetes" /><published>2021-09-24T00:00:00+02:00</published><updated>2021-09-24T00:00:00+02:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2021/09/24/Continuous-orchestration-with-kubernetes</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2021/09/24/Continuous-orchestration-with-kubernetes.html">&lt;h2 id=&quot;continuous-orchestration&quot;&gt;Continuous orchestration&lt;/h2&gt;

&lt;p&gt;Continuous orchestration is the ability to automate the deployment, management, scaling and networking of containers. It responds dynamically to changes in the environment and ensures all deployed container instances get updated if a new version of a service is released.&lt;/p&gt;

&lt;p&gt;There are several tools used for container lifecycle management, like the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kubernetes&lt;/li&gt;
  &lt;li&gt;Docker Swarm&lt;/li&gt;
  &lt;li&gt;Openshift&lt;/li&gt;
  &lt;li&gt;Apache Mesos&lt;/li&gt;
  &lt;li&gt;HashiCorp Nomad&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kubernetes&quot;&gt;Kubernetes&lt;/h2&gt;

&lt;p&gt;Kubernetes is a powerfull open source container orchestration tool. It is also known as “&lt;em&gt;k8s&lt;/em&gt;” or “&lt;em&gt;kube&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;It offers several features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Automatic rollouts and rollbacks&lt;/li&gt;
  &lt;li&gt;Load balancing&lt;/li&gt;
  &lt;li&gt;Simple horizontal scaling&lt;/li&gt;
  &lt;li&gt;Self-healing&lt;/li&gt;
  &lt;li&gt;Automatic bin packing&lt;/li&gt;
  &lt;li&gt;Batch execution&lt;/li&gt;
  &lt;li&gt;Storage orchestration&lt;/li&gt;
  &lt;li&gt;IPv4 and IPv6 support&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kubernetes-components&quot;&gt;Kubernetes components&lt;/h3&gt;

&lt;p&gt;A working Kubernetes component is called a cluster. It has two main components that make the architecture of the system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Control plane: Makes the global decisions about the cluster. It has three components:
    &lt;ul&gt;
      &lt;li&gt;kube apiserver&lt;/li&gt;
      &lt;li&gt;kube scheduler&lt;/li&gt;
      &lt;li&gt;kube controller manager&lt;/li&gt;
      &lt;li&gt;etcd: key-value storage.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Compute machines: Also known as nodes. They run several components:
    &lt;ul&gt;
      &lt;li&gt;kubelet&lt;/li&gt;
      &lt;li&gt;kube proxy&lt;/li&gt;
      &lt;li&gt;container runtime&lt;/li&gt;
      &lt;li&gt;pod: A sigle instance of an application&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kubernetes-installation&quot;&gt;Kubernetes installation&lt;/h3&gt;

&lt;p&gt;Note that you must have Docker installed as a prerequisite.&lt;/p&gt;

&lt;p&gt;The following is a script that installs Kubernetes on a system running Ubuntu, and it was made from the information provided &lt;a href=&quot;https://ubuntu.com/kubernetes/install&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;snap &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;microk8s &lt;span class=&quot;nt&quot;&gt;--classic&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;usermod &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-G&lt;/span&gt; microk8s &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; R &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt; ~/.kube
su - &lt;span class=&quot;nv&quot;&gt;$USER&lt;/span&gt;
microk8s status &lt;span class=&quot;nt&quot;&gt;--wait-ready&lt;/span&gt;
microk8s &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;dashboard dns ingress
microk8s kubectl get all &lt;span class=&quot;nt&quot;&gt;--all-namespaces&lt;/span&gt;
microk8s dashboard-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kubernetes-basics&quot;&gt;Kubernetes basics&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pods: Collection of one or more containers with shared storage.
    &lt;ul&gt;
      &lt;li&gt;They can contain multiple apps, and made up from a template.&lt;/li&gt;
      &lt;li&gt;They can run on a single container, or on multiple containers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Labels: key-value pairs that Kubernetes attaches to objects. Some examples are:
    &lt;ul&gt;
      &lt;li&gt;“release”:”stable”&lt;/li&gt;
      &lt;li&gt;“tier”:”frontend”&lt;/li&gt;
      &lt;li&gt;“track”:”daily”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Selectors: Core grouping primitives. There are two types of selectors:
    &lt;ul&gt;
      &lt;li&gt;Equality-based selectors: They use label keys and values.&lt;/li&gt;
      &lt;li&gt;Set-based selectors: They filter keys according to a set of values.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Controllers: Monitor the state of the cluster. These are the types of controllers:
    &lt;ul&gt;
      &lt;li&gt;Replication controller&lt;/li&gt;
      &lt;li&gt;Daemon set controller&lt;/li&gt;
      &lt;li&gt;Job controller&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Replica set: Ensures that a set of replica pods is running at any given time.&lt;/li&gt;
  &lt;li&gt;Deployments and services: Controller that transforms the current state into the intended state. They are used to:
    &lt;ul&gt;
      &lt;li&gt;Clean up older replica sets.&lt;/li&gt;
      &lt;li&gt;Roll out a replica set.&lt;/li&gt;
      &lt;li&gt;Declare the new state of pods.&lt;/li&gt;
      &lt;li&gt;Indicate that a rollout is stuck.&lt;/li&gt;
      &lt;li&gt;Apply multiple fixes to pods.&lt;/li&gt;
      &lt;li&gt;Facilitate more load.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Services: An abstraction that defines a logical set of pods as well as a policy for accessing them. There are two ways of accessing a service:
    &lt;ul&gt;
      &lt;li&gt;DSN method: A name is given to the service when initialized.&lt;/li&gt;
      &lt;li&gt;Environment variable method: kubelet adds envionment variables for each active service.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Services types:
    &lt;ul&gt;
      &lt;li&gt;ClusterIP: Default.&lt;/li&gt;
      &lt;li&gt;NodePort: Exposes a port.&lt;/li&gt;
      &lt;li&gt;LoadBalancer: Cloud provider load balancer is used.&lt;/li&gt;
      &lt;li&gt;ExternalName: Assigns a CNAME.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kubernetes-best-practises&quot;&gt;Kubernetes best practises&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Update Kubernetes to the latest version&lt;/li&gt;
  &lt;li&gt;Use Pod Security Policies&lt;/li&gt;
  &lt;li&gt;Use Kubernetes namespaces&lt;/li&gt;
  &lt;li&gt;Use Network Policies&lt;/li&gt;
  &lt;li&gt;Configure the Kubernetes API server securely&lt;/li&gt;
  &lt;li&gt;Maintain small container images&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;managing-a-kubernetes-cluster&quot;&gt;Managing a Kubernetes cluster&lt;/h3&gt;

&lt;p&gt;Kubernetes provides a cli tool called kubectl that allows us to manage the cluster.&lt;/p&gt;

&lt;p&gt;To initialize the cluster, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo kubeadm init&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To reset the cluster, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo kubeadm reset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To list the nodes and their status, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get nodes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To create a pod, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl run &amp;lt;podname&amp;gt; --image=&amp;lt;imagename:version&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get information about a pod, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl describe pods &amp;lt;podname&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To delete a pod, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl delete pods &amp;lt;podname&amp;gt;&lt;/code&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Continuous orchestration</summary></entry><entry><title type="html">Continuous monitoring</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2021/09/23/Continuous-monitoring.html" rel="alternate" type="text/html" title="Continuous monitoring" /><published>2021-09-23T00:00:00+02:00</published><updated>2021-09-23T00:00:00+02:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2021/09/23/Continuous-monitoring</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2021/09/23/Continuous-monitoring.html">&lt;h2 id=&quot;continuous-monitoring&quot;&gt;Continuous monitoring&lt;/h2&gt;

&lt;p&gt;Continuous monitoring is the ability to detect risk, compliance and security issues in an operation environment.&lt;/p&gt;

&lt;h3 id=&quot;monitoring-types&quot;&gt;Monitoring types&lt;/h3&gt;

&lt;p&gt;There are four main monitoring types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Real-time monitoring: CPU statistics, RAM usage, disk usage, I/O operations…&lt;/li&gt;
  &lt;li&gt;Infrastructure monitoring: CPU and memory, network, web servers, app servers, DB servers…&lt;/li&gt;
  &lt;li&gt;Application monitoring: API success or failure, performance metrics count, API accessibility…&lt;/li&gt;
  &lt;li&gt;Network monitoring: Number of packets per second, total bytes transfered…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;

&lt;p&gt;There are a wide variety of continuous monitoring tools. Some of them are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nagios&lt;/li&gt;
  &lt;li&gt;ELK Stack&lt;/li&gt;
  &lt;li&gt;Datadog&lt;/li&gt;
  &lt;li&gt;Splunk&lt;/li&gt;
  &lt;li&gt;Grafana&lt;/li&gt;
  &lt;li&gt;Ganglia&lt;/li&gt;
  &lt;li&gt;Zabbix&lt;/li&gt;
  &lt;li&gt;Sensu&lt;/li&gt;
  &lt;li&gt;New Relic&lt;/li&gt;
  &lt;li&gt;AWS Cloudwatch&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;continuous-monitoring-with-nagios&quot;&gt;Continuous monitoring with Nagios&lt;/h2&gt;

&lt;p&gt;Nagios is an open source continuous monitoring tool that allows for system, network and IT infrastructure monitoring.&lt;/p&gt;

&lt;p&gt;It is available in two variants:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nagios core: Open source.&lt;/li&gt;
  &lt;li&gt;Nagios XI: Licensed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are some benefits to using Nagios:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nagios finds any type of network issue.&lt;/li&gt;
  &lt;li&gt;Nagios monitors the infrastructure actively.&lt;/li&gt;
  &lt;li&gt;Nagios can facilitate automatic problem resolution.&lt;/li&gt;
  &lt;li&gt;Nagios troubleshoots server performance issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;nagios-architecture&quot;&gt;Nagios architecture&lt;/h3&gt;

&lt;p&gt;Nagios uses a client-server architecture, with the server running on a host, and the plugins running in the clients, which are specified for monitoring.&lt;/p&gt;

&lt;h3 id=&quot;nagios-plugins&quot;&gt;Nagios plugins&lt;/h3&gt;

&lt;p&gt;Types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Official: What you should tend to use.&lt;/li&gt;
  &lt;li&gt;Community: What you can use.&lt;/li&gt;
  &lt;li&gt;Custom: What you should build and use if there is nothing official or in the community for what you’re trying to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;elk-stack&quot;&gt;ELK stack&lt;/h2&gt;

&lt;p&gt;It is an open source, distributed monitoring solution suitable for almost any data source.&lt;/p&gt;

&lt;p&gt;It is the acronym for 4 open source projects:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Elasticsearch: Distributed search and analytics engine that provides data in real time. Highly scalable, it can store complex data structures.&lt;/li&gt;
  &lt;li&gt;Logstash: Data processing for Elasticsearch.&lt;/li&gt;
  &lt;li&gt;Kibana: Data visualization tool. It provides the GUI for Elasticsearch.&lt;/li&gt;
  &lt;li&gt;Beats: This was added after the initial acronym was created. It a lightweight data collector, installed directly on the data source. There various data collectors:
    &lt;ul&gt;
      &lt;li&gt;Filebeat: Sends local file records.&lt;/li&gt;
      &lt;li&gt;Winlogbeat: Sends Windows event logs.&lt;/li&gt;
      &lt;li&gt;Metricbeat: Sends system performance metrics.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ELK stack is very efficient, and everyday more and more organizations are starting to use it.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Continuous monitoring</summary></entry><entry><title type="html">Containerization with Docker</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2021/09/22/Containerization-with-Docker.html" rel="alternate" type="text/html" title="Containerization with Docker" /><published>2021-09-22T00:00:00+02:00</published><updated>2021-09-22T00:00:00+02:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2021/09/22/Containerization-with-Docker</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2021/09/22/Containerization-with-Docker.html">&lt;h2 id=&quot;containerization&quot;&gt;Containerization&lt;/h2&gt;

&lt;p&gt;Containerization is a process that consists of packaging code and all of its dependencies, so it can be moved from one execution environment to another and executed quickly and reliably.&lt;/p&gt;

&lt;p&gt;It is a type of OS virtualization, through which applications run and are isolated in what are called “containers”.&lt;/p&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;

&lt;p&gt;There are many benefits to using virtualization:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Portability&lt;/li&gt;
  &lt;li&gt;Scalability&lt;/li&gt;
  &lt;li&gt;Faster deployment&lt;/li&gt;
  &lt;li&gt;High productivity&lt;/li&gt;
  &lt;li&gt;Enhanced security&lt;/li&gt;
  &lt;li&gt;Continuity (if one fails, it does not affect the others)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;differences-with-virtualization&quot;&gt;Differences with virtualization&lt;/h3&gt;

&lt;p&gt;Virtualization uses software to create an abstraction layer over the computer hardware, so they can be divided and used as if there were multiple computers (called VMs). Each VM has its own OS.&lt;/p&gt;

&lt;p&gt;With virtualization, you can run multiple computers under the same real computer, but with containerization, you can run multiple services under the same OS on a single computer.&lt;/p&gt;

&lt;p&gt;Furthermore, virtualization is a heavyweight operation, in comparison to containerization, which is a lightweight operation.&lt;/p&gt;

&lt;p&gt;On one hand, virtualization provides complete isolation, on the other hand, containerization provides less isolation from the host OS.&lt;/p&gt;

&lt;p&gt;But the most important difference is that virtualization is not portable, where as containerization was built to be portable.&lt;/p&gt;

&lt;h2 id=&quot;docker&quot;&gt;Docker&lt;/h2&gt;

&lt;p&gt;Docker is the most well-known containerization tool. It goes by the keywords “develop”, “ship” and “run” anywhere.&lt;/p&gt;

&lt;p&gt;It provides what is called Docker Platform, that allows for container development, testing and deployment.&lt;/p&gt;

&lt;p&gt;Docker uses a client-server architecture, so the client and the daemon can be in different servers.&lt;/p&gt;

&lt;p&gt;The architecture components are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Docker Host: Includes the Docker daemon (one of the most core components), which handles Docker Objects such as images, containers, networks and volumes.&lt;/li&gt;
  &lt;li&gt;Docker Client: Transmits the commands to the Docker deamon, which executes it.&lt;/li&gt;
  &lt;li&gt;Docker Registries: They store Docker Images that can be downloaded.&lt;/li&gt;
  &lt;li&gt;Docker Objects: They are the following:
    &lt;ul&gt;
      &lt;li&gt;Image: Read-only template.&lt;/li&gt;
      &lt;li&gt;Container: Created when an image is run.&lt;/li&gt;
      &lt;li&gt;Volume: Store the persistent data of the cointainers.&lt;/li&gt;
      &lt;li&gt;Network: How the isolated containers communicate with one another. It has several network drivers.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Docker Engine: The core part of the Docker system. It is an application that follows a client-server architecture. It has several components:
    &lt;ul&gt;
      &lt;li&gt;Server: The daemon.&lt;/li&gt;
      &lt;li&gt;REST API: To communicate with the Docker daemon.&lt;/li&gt;
      &lt;li&gt;Docker CLI: Client used to enter Docker commands.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;For Ubuntu systems, &lt;a href=&quot;https://docs.docker.com/engine/install/ubuntu/&quot;&gt;this&lt;/a&gt; is the webpage with the installation instructions.&lt;/p&gt;

&lt;p&gt;The following is a script that does everything automatically, with no configuration required:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://get.docker.com &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; get-docker.sh
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sh get-docker.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;images&quot;&gt;Images&lt;/h3&gt;

&lt;p&gt;To create a Docker Image, you can write a Dockerfile using a simple syntax that defines the steps required to set everything up.&lt;/p&gt;

&lt;p&gt;Here is a list of the basic commands to use and manipulate images:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image build&lt;/code&gt;: Create an image from a Docker file.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image history&lt;/code&gt;: Display an image’s history.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image inspect&lt;/code&gt;: Display detailed information about one or more images.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image ls&lt;/code&gt;: Lists the images.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image prune&lt;/code&gt;: Removes unused images.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image pull&lt;/code&gt;: Downloads an image from a registry.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image push&lt;/code&gt;: Pushes an image to a registry.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image rm&lt;/code&gt;: Deletes one or more images.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker image save&lt;/code&gt;: Saves an image to a .tar archive.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;containers&quot;&gt;Containers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker container ls&lt;/code&gt;: Show the running containers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker stop &amp;lt;container_name&amp;gt;&lt;/code&gt;: Stop the container named &amp;lt;container_name&amp;gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;networks&quot;&gt;Networks&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker network ls&lt;/code&gt;: List the networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;network-drivers&quot;&gt;Network drivers&lt;/h3&gt;

&lt;p&gt;Docker has several network drivers available:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bridge: Interconnects containers running under the same daemon.&lt;/li&gt;
  &lt;li&gt;Host: The container shares the hosts network, but it does not have its own IP address.&lt;/li&gt;
  &lt;li&gt;Overlay: Connects two or more Docker daemon hosts to form a distributed network. It can be used with encryption enabled so the communications are secure.&lt;/li&gt;
  &lt;li&gt;Macvlan: Some legacy apps demand to be connected to the physical network. This driver can be used to assign a MAC address to each container’s virtual network interface.&lt;/li&gt;
  &lt;li&gt;None: Used to completely disable the network on a container.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;docker-usage-examples&quot;&gt;Docker usage examples&lt;/h3&gt;

&lt;p&gt;Build a custom image from a Dockerfile on the current working directory:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; new_image_name &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run a Python3 program that’s on the current working directory on a Python3 container and remove the container when the program finishes:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/src python:3 python/src/program.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start a Python3 container in iteractive mode (open the interpreter shell):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/src python:3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start a Python3 container and open a Bash shell:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/src python:3 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a Dockerfile from the base image of Python3 and add numpy to it, then build the image from the Dockerfile of the current working directory (&lt;em&gt;.&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Dockerfile &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
FROM python:3

RUN pip3 install numpy
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; &amp;lt;new_image_name&amp;gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Start an Nginx container to serve files of the current working directory, forwarding the port 80 of the host to the port 80 of the container. As Nginx is a web server, it will keep running until we stop it:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/usr/share/nginx/html &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 nginx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same as the last one, but run the container in background mode (&lt;em&gt;-d&lt;/em&gt; for &lt;em&gt;daemon&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/usr/share/nginx/html &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 80:80 &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; nginx:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Open a shell on a container running in the background:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &amp;lt;container_name&amp;gt; /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create a network, a Mysql container in the background (setting the environment variable MYSQL_ROOT_PASSWORD to ‘root’) and a Node.js container with an open Bash shell. &lt;strong&gt;Note that Docker automatically sets up DNS entries so the containers can communicate with each other using their names&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker network create &amp;lt;network_name&amp;gt;
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; mysql &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt; &amp;lt;network_name&amp;gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'root'&lt;/span&gt; mysql:5.6
docker run &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; nodejs &lt;span class=&quot;nt&quot;&gt;--net&lt;/span&gt; &amp;lt;network_name&amp;gt; nodejs:8 /bin/bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h2&gt;

&lt;p&gt;The best way to describe Docker Compose is “Docker on steroids”, is a tool that allows users to define and run multi-container Docker applications.&lt;/p&gt;

&lt;p&gt;It uses a .yaml file that has the configuration for your application services. Once that gets defined, you can start everything with one command.&lt;/p&gt;

&lt;p&gt;It is compatible with the following environments:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Production&lt;/li&gt;
  &lt;li&gt;Staging&lt;/li&gt;
  &lt;li&gt;Development&lt;/li&gt;
  &lt;li&gt;Testing&lt;/li&gt;
  &lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;steps-to-use-docker-compose&quot;&gt;Steps to use Docker Compose&lt;/h3&gt;

&lt;p&gt;These are the steps to start using Docker Compose:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create a Dockerfile.&lt;/li&gt;
  &lt;li&gt;Create docker-compose.yml&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following is a docker-compose.yml example file:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5000:5000&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.:/code&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;logvolume01:/var/log&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;logvolume01&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;docker-compose-commands&quot;&gt;Docker Compose commands&lt;/h3&gt;

&lt;p&gt;Here is a list of the basic Docker Compose commands:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt;: Build or rebuild services.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-componse create&lt;/code&gt;: Create containers for a service.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose down&lt;/code&gt;: Stop and remove containers and networks.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose kill&lt;/code&gt;: Force stop service containers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose ls&lt;/code&gt;: List running compose projects.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose pause&lt;/code&gt;: Pause the services.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose ps&lt;/code&gt;: List containers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose restart&lt;/code&gt;: Restart containers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose rm&lt;/code&gt;: Removed stopped service containers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose start&lt;/code&gt;: Start services.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose stop&lt;/code&gt;: Stop services.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt;: Create and start containers.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;: Create and start containers in the background.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -f docker-compose.json&lt;/code&gt;: Create and start containers defined in a JSON file.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;examples&quot;&gt;Examples&lt;/h3&gt;

&lt;h4 id=&quot;example-1&quot;&gt;Example 1&lt;/h4&gt;

&lt;p&gt;You can use a JSON file instead of a YML file, but in that case you have to specify to Docker Compose the file that you want to use.&lt;/p&gt;

&lt;p&gt;Start a Redis and a Mysql container. &lt;strong&gt;Note that with Docker Compose, the containers that you start at the same time, they will be connected to the same network automatically&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;docker-compose.yml file:&lt;/p&gt;

&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;redis:3.2.12&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./redis:/data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;mysql&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:5.6&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;root&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./mysql:/var/lib/mysql&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose -d up&lt;/code&gt; to start the containers in the background.&lt;/p&gt;

&lt;h4 id=&quot;example-2&quot;&gt;Example 2&lt;/h4&gt;

&lt;p&gt;Start an Nginx server and a Node.js application, and configure the Nginx to act as a proxy for the nodejs application.&lt;/p&gt;

&lt;p&gt;lb.conf file (for Nginx):&lt;/p&gt;
&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serv&lt;/span&gt;{
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodejs&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;;
}

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
  &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
    &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;serv&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker-compose.yml file:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodejs&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./app:/opt/app&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Run as soon as the container starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node /opt/app/app.js&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Port forwarding&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1313:8080&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./nginx/lb.conf:/etc/nginx/conf.d/lb.conf&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Wait until the nodejs service has started, then start the nginx service&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodejs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose -d up&lt;/code&gt; to start the containers in the background.&lt;/p&gt;

&lt;h4 id=&quot;example-3&quot;&gt;Example 3&lt;/h4&gt;

&lt;p&gt;The same as the last one, but now use a Dockerfile to build a custom image for the nodejs application, and we start a bunch of nodejs applications and set a load balancer with Nginx.&lt;/p&gt;

&lt;p&gt;lb.conf file (for Nginx):&lt;/p&gt;
&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;upstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serv&lt;/span&gt;{
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex3_nodejs_1&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex3_nodejs_2&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex3_nodejs_3&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;;
  &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex3_nodejs_4&lt;/span&gt;:&lt;span class=&quot;m&quot;&gt;3000&lt;/span&gt;;
}

&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; {
  &lt;span class=&quot;n&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8080&lt;/span&gt;;
  &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt; / {
    &lt;span class=&quot;n&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;://&lt;span class=&quot;n&quot;&gt;serv&lt;/span&gt;;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dockerfile:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;FROM node:latest&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;docker-compose.yml file:&lt;/p&gt;
&lt;div class=&quot;language-yml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nodejs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#container_name: nodejs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Use the Dockerfile in the current working directory (.) to build the container image&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./app:/opt/app&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Run as soon as the container starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;node /opt/app/app.js&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;nginx&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nginx:latest&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Port forwarding&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1313:8080&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./nginx/lb.conf:/etc/nginx/conf.d/lb.conf&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Wait until the nodejs service has started, then start the nginx service&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodejs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose -d up --scale nodejs=4&lt;/code&gt; to start the containers in the background, and start 4 containers of the nodejs application.&lt;/p&gt;

&lt;h2 id=&quot;docker-swarm-mode&quot;&gt;Docker Swarm Mode&lt;/h2&gt;

&lt;p&gt;Swarm Mode is a cluster management and orchestration tool that’s embedded right in the Docker Engine. If you know what Kubernetes is, the best way to describe Swarm Mode is to think about it as a Kubernetes alternative that’s easier to use and that I would recommend for simple applications that are not too complex to manage.&lt;/p&gt;

&lt;p&gt;Comparing it to Docker Compose, and its ability to define and run containers, you can define and run Swarm service stacks.&lt;/p&gt;

&lt;p&gt;If you want detailed information, check the &lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot;&gt;official page&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;key-concepts&quot;&gt;Key concepts&lt;/h3&gt;

&lt;h4 id=&quot;node&quot;&gt;Node&lt;/h4&gt;

&lt;p&gt;A node is an &lt;strong&gt;instance of a Docker Engine that takes part in the swarm&lt;/strong&gt;. You can have one or more on a single computer, but usually they are distributed across multiple machines. There are two types:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Manager node: Dispatches the work (tasks) to the worker nodes. By default, they act as worker nodes too.&lt;/li&gt;
  &lt;li&gt;Worker node: Receives and execute tasks dispatched from the manager nodes. It notifies the manager of the current state of operation periodically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;service&quot;&gt;Service&lt;/h4&gt;

&lt;p&gt;It is the &lt;strong&gt;definition of the tasks that will get executed&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;A service specification dictates the container image to use and the commands to execute inside the running containers.&lt;/p&gt;

&lt;p&gt;In the replicated services model, the swarm manager sends replica tasks to the worker nodes, and for global services, the swarm runs one task for the service on every node of the cluster.&lt;/p&gt;

&lt;h4 id=&quot;task&quot;&gt;Task&lt;/h4&gt;

&lt;p&gt;It is made of a container and the commands to run inside said container. It is the &lt;strong&gt;minimum unit of swarm&lt;/strong&gt;. Once a task gets assigned to a node, it can only run on the assigned node.&lt;/p&gt;

&lt;h4 id=&quot;load-balancing&quot;&gt;Load balancing&lt;/h4&gt;

&lt;p&gt;The manager node uses &lt;strong&gt;ingress load balancing&lt;/strong&gt;, so the services you want are made available to the Internet. If a port is not specified, is uses a port from the range 30000-32767.&lt;/p&gt;

&lt;p&gt;Like Docker Compose, Swarm Mode automatically assigns DNS records to each service, and uses internal load balancing to distribute requests between the services based on the DNS names.&lt;/p&gt;

&lt;h3 id=&quot;getting-started&quot;&gt;Getting started&lt;/h3&gt;

&lt;p&gt;In order to be able to use Swarm Mode there are several prerequisites that need to be satisfied:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Three Linux hosts that can communicate over a network, with Docker installed.&lt;/li&gt;
  &lt;li&gt;The IP address of the manager. You should use a fixed IP address for the manager as all nodes in the swarm need to connect to it.&lt;/li&gt;
  &lt;li&gt;The ports 2377, 7946 and 4789 (and 50 if you plan to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--opt encrypted&lt;/code&gt; to use secure connections between the machines) open and allowed by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More coming soon.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Containerization</summary></entry><entry><title type="html">Configuration management with Ansible</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2021/09/21/Configuration-management-with-ansible.html" rel="alternate" type="text/html" title="Configuration management with Ansible" /><published>2021-09-21T00:00:00+02:00</published><updated>2021-09-21T00:00:00+02:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2021/09/21/Configuration-management-with-ansible</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2021/09/21/Configuration-management-with-ansible.html">&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Ansible is a tool that allows us to automate several things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Cloud provisioning&lt;/li&gt;
  &lt;li&gt;Configuration management&lt;/li&gt;
  &lt;li&gt;Application deployment&lt;/li&gt;
  &lt;li&gt;Intra-service orchestration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is built from the ground up for multi-tier deployments, defining how the systems interact, instead of defining what each one does.&lt;/p&gt;

&lt;p&gt;For that, it uses playbooks written in YAML. These playbooks describe the automation jobs.&lt;/p&gt;

&lt;h2 id=&quot;install&quot;&gt;Install&lt;/h2&gt;

&lt;p&gt;For Debian based distros, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt install ansible -y&lt;/code&gt; to install Ansible on your system.&lt;/p&gt;

&lt;h2 id=&quot;components&quot;&gt;Components&lt;/h2&gt;

&lt;p&gt;Ansible has 6 components:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Modules&lt;/li&gt;
  &lt;li&gt;Module utilities&lt;/li&gt;
  &lt;li&gt;Plugins&lt;/li&gt;
  &lt;li&gt;Inventory&lt;/li&gt;
  &lt;li&gt;Playbooks&lt;/li&gt;
  &lt;li&gt;Ansible search path&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;use-example&quot;&gt;Use example&lt;/h2&gt;

&lt;p&gt;This example supposes you have one Ansible Control Node (where you’ll launch the Ansible playbook) and one or more Ansible hosts (to which the control node will connect) that have the control node’s public SSH key added to the authorized_hosts file.&lt;/p&gt;

&lt;p&gt;The first thing is to tell Ansible who are the hosts to connect to. To do so, open /etc/ansible/hosts and add the following:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[example_servers]
server1 ansible_host=10.10.10.2
server2 ansible_host=10.10.10.3

[all:vars]
ansible_playbook_interpreter=/usr/bin/python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the first section, we specify the IPs of the servers, and in the second we make sure that the Python interpreter that Ansible will use is the version 3.x.&lt;/p&gt;

&lt;p&gt;Now, you can run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible-inventory --list -y&lt;/code&gt; and it should output something like this:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;Output&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;example_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;server1&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.10.10.2&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ansible_python_interpreter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/bin/python3&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;server2&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10.10.10.3&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;ansible_python_interpreter&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/usr/bin/python3&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ungrouped&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once that’s done, we can test the connection by running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible all -m ping -u &amp;lt;user&amp;gt;&lt;/code&gt;, in which &amp;lt;user&amp;gt; should be substituted by the user that is authorized by the public SSH on the hosts.&lt;/p&gt;

&lt;p&gt;If everything goes well, you should get a similar output to this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server1 | SUCCESS =&amp;gt; {
    &quot;changed&quot;: false, 
    &quot;ping&quot;: &quot;pong&quot;
}
server2 | SUCCESS =&amp;gt; {
    &quot;changed&quot;: false, 
    &quot;ping&quot;: &quot;pong&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And with that, you have Ansible configured and ready to go.&lt;/p&gt;

&lt;h2 id=&quot;ad-hoc-commands&quot;&gt;Ad-hoc commands&lt;/h2&gt;

&lt;p&gt;Now you can start running ad-hoc commands and playbooks on your servers.&lt;/p&gt;

&lt;p&gt;The following is an example of a command that will output the disk usage on each server:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ansible all -a &quot;df -h&quot; -u &amp;lt;user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It should give you an output somewhat like this:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server1 | CHANGED | rc=0 &amp;gt;&amp;gt;
Filesystem      Size  Used Avail Use% Mounted on
udev            9.9G     0  3.9G   0% /dev
tmpfs           998M  624K  798M   1% /run
/dev/vda1       195G  2.3G  153G   2% /
tmpfs           5.9G     0  3.9G   0% /dev/shm
tmpfs           5.9M     0  5.0M   0% /run/lock
tmpfs           9.9G     0  3.9G   0% /sys/fs/cgroup
/dev/vda15      155M  3.6M  101M   4% /boot/efi
tmpfs           975M     0  798M   0% /run/user/0

server2 | CHANGED | rc=0 &amp;gt;&amp;gt;
Filesystem      Size  Used Avail Use% Mounted on
udev            9.9G     0  3.9G   0% /dev
tmpfs           998M  624K  798M   1% /run
/dev/vda1       195G  2.3G  153G   2% /
tmpfs           5.9G     0  3.9G   0% /dev/shm
tmpfs           5.9M     0  5.0M   0% /run/lock
tmpfs           9.9G     0  3.9G   0% /sys/fs/cgroup
/dev/vda15      155M  3.6M  101M   4% /boot/efi
tmpfs           975M     0  798M   0% /run/user/0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An example of a command that will install nmap on all of the servers is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible example_servers -m apt -a &quot;name=nmap state=latest&quot; -u &amp;lt;user&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, if you want to execute an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt; command, you have to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-m apt&lt;/code&gt; to specify it.&lt;/p&gt;

&lt;p&gt;If you only want to execute a shell command, for example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free -h&lt;/code&gt; to see the RAM usage on each server, you would use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible example_servers -a &quot;free -h&quot; -u &amp;lt;user&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;playbooks&quot;&gt;Playbooks&lt;/h2&gt;

&lt;p&gt;An Ansible playbook is a file that defines a list of task that will be automatically executed by remote computers in an Ansible network.&lt;/p&gt;

&lt;p&gt;Here is an example of a playbook that just does a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l ~/&lt;/code&gt; on the host machines:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Runs ls -l ~/ on the specified hosts&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;servers&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Runs ls -l ~/, stores the output in registervariable and outputs it&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-l&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;~/&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;register&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;registervariable&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;msg=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can run it with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible-playbook -u &amp;lt;user&amp;gt; ansible-playbook.yaml&lt;/code&gt;&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Overview</summary></entry><entry><title type="html">DevOps</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2021/09/20/DevOps.html" rel="alternate" type="text/html" title="DevOps" /><published>2021-09-20T00:00:00+02:00</published><updated>2021-09-20T00:00:00+02:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2021/09/20/DevOps</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2021/09/20/DevOps.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;DevOps is a set of practises that combines software development (Dev) and IT operations (Ops). It aims to shorten the systems development life cycle and provide continuous delivery with high software quality. DevOps is complementary with Agile software development; several DevOps aspects came from the Agile methodology. (&lt;a href=&quot;https://en.wikipedia.org/wiki/DevOps&quot;&gt;Wikipedia&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&quot;devops-lifecycle&quot;&gt;DevOps lifecycle&lt;/h2&gt;

&lt;p&gt;It consists of 5 phases that create a loop:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Continuous development&lt;/li&gt;
  &lt;li&gt;Continuous testing&lt;/li&gt;
  &lt;li&gt;Continuous integration&lt;/li&gt;
  &lt;li&gt;Continuous deployment&lt;/li&gt;
  &lt;li&gt;Continuous monitoring&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;software-development&quot;&gt;Software development&lt;/h2&gt;

&lt;p&gt;Software development has 7 stages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Plan&lt;/li&gt;
  &lt;li&gt;Create&lt;/li&gt;
  &lt;li&gt;Verify&lt;/li&gt;
  &lt;li&gt;Package&lt;/li&gt;
  &lt;li&gt;Release&lt;/li&gt;
  &lt;li&gt;Configure&lt;/li&gt;
  &lt;li&gt;Monitor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;agile-model&quot;&gt;Agile model&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Analyze&lt;/li&gt;
  &lt;li&gt;Plan&lt;/li&gt;
  &lt;li&gt;Design&lt;/li&gt;
  &lt;li&gt;Build&lt;/li&gt;
  &lt;li&gt;Test&lt;/li&gt;
  &lt;li&gt;Review&lt;/li&gt;
  &lt;li&gt;Launch&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;working-with-scrum&quot;&gt;Working with Scrum&lt;/h2&gt;

&lt;p&gt;There is a product backlog that has all the features to be implemented.&lt;/p&gt;

&lt;p&gt;Every 2-4 weeks a sprint plan is made, and the selected features put in the respective sprint backlog.&lt;/p&gt;

&lt;p&gt;Every time a sprint ends, there is a retrospective. That is a team meeting in which everyone gets to talk about how everything is going and share their thoughts.&lt;/p&gt;

&lt;h2 id=&quot;agile-and-devops&quot;&gt;Agile and DevOps&lt;/h2&gt;

&lt;p&gt;Both agile methodologies and DevOps have things in common:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Early and valuable deliveries of software&lt;/li&gt;
  &lt;li&gt;Automate everything&lt;/li&gt;
  &lt;li&gt;Improve team integration&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dasa---6-principles-of-devops&quot;&gt;DASA - 6 principles of DevOps&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Customer-centric action&lt;/li&gt;
  &lt;li&gt;Create with the end in mind&lt;/li&gt;
  &lt;li&gt;End-to-end responsibility&lt;/li&gt;
  &lt;li&gt;Cross-functional autonomous teams&lt;/li&gt;
  &lt;li&gt;Continuous improvement&lt;/li&gt;
  &lt;li&gt;Automate everything you can&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;devops-tools&quot;&gt;DevOps tools&lt;/h2&gt;

&lt;p&gt;Here is a list of some tools (there are many, many more available) used in DevOps.&lt;/p&gt;

&lt;p&gt;For source code management:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Git&lt;/li&gt;
  &lt;li&gt;GitHub&lt;/li&gt;
  &lt;li&gt;GitLab&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For software builds:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Gradle&lt;/li&gt;
  &lt;li&gt;Maven&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For testing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Selenium&lt;/li&gt;
  &lt;li&gt;Junit&lt;/li&gt;
  &lt;li&gt;Appium&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For integration:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Jenkins&lt;/li&gt;
  &lt;li&gt;Bamboo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For deployment:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Terraform&lt;/li&gt;
  &lt;li&gt;Ansible&lt;/li&gt;
  &lt;li&gt;Chef&lt;/li&gt;
  &lt;li&gt;Puppet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For monitoring:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Nagios&lt;/li&gt;
  &lt;li&gt;Splunk&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For containerization:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;Kubernetes&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuration-management&quot;&gt;Configuration management&lt;/h2&gt;

&lt;p&gt;Configuration management is a system engineering method that ensures a product’s characteristics remain consistent during its life cycle.&lt;/p&gt;

&lt;p&gt;It provides a &lt;em&gt;configuration model&lt;/em&gt; of the services, assets and infrastructure by recording the relationships between service assets and configuration items.&lt;/p&gt;

&lt;h3 id=&quot;configuration-management-tools&quot;&gt;Configuration management tools&lt;/h3&gt;

&lt;p&gt;They enable deployments to be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Faster&lt;/li&gt;
  &lt;li&gt;Scalable&lt;/li&gt;
  &lt;li&gt;Repeatable&lt;/li&gt;
  &lt;li&gt;Predictable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some popular tools are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Saltstack: Python based, open source tool used to remotely manage configuration items.&lt;/li&gt;
  &lt;li&gt;Ansible: Python based, agentless tool.&lt;/li&gt;
  &lt;li&gt;Chef: Ruby based configuration management tool that has integration with most of the cloud providers.&lt;/li&gt;
  &lt;li&gt;Puppet: Ruby DSL based tool that enables the use to manage software, systems and network configuration items.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Introduction</summary></entry><entry><title type="html">Security of software systems</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2020/12/09/security-of-software-systems.html" rel="alternate" type="text/html" title="Security of software systems" /><published>2020-12-09T23:00:00+01:00</published><updated>2020-12-09T23:00:00+01:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2020/12/09/security-of-software-systems</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2020/12/09/security-of-software-systems.html">&lt;p&gt;In this article I will try to explain by my own words every single thing that I learned during my Computer Engineering degree when it comes to security of software systems.&lt;/p&gt;

&lt;h2 id=&quot;01---cryptography&quot;&gt;01 - Cryptography&lt;/h2&gt;

&lt;h3 id=&quot;definitions&quot;&gt;Definitions&lt;/h3&gt;

&lt;p&gt;Here are some basic concepts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Cryptography&lt;/em&gt;: The study of techniques of altering the representation of a message.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Cleartext&lt;/em&gt;: Original message. It is legible.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Ciphertext&lt;/em&gt;: Illegible text. It is the result of encryption performed on plaintext.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Cipher&lt;/em&gt;: Algorithm that transforms cleartext into ciphertext.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Key&lt;/em&gt;: Sequence of symbols that the ciphers use.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;symmetric-cipher&quot;&gt;Symmetric cipher&lt;/h3&gt;

&lt;p&gt;The cleartext is encrypted and decrypted using one key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-symmetric-cipher.png&quot; alt=&quot;Symmetric cipher diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This technique relies on these factors:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It is impossible to recover the original text knowing exclusively the ciphertext.&lt;/li&gt;
  &lt;li&gt;The shared key is secret.&lt;/li&gt;
  &lt;li&gt;It is possible to physicaly implement the algorithms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some classic techniques that symmetric ciphers use:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Substitution&lt;/strong&gt;: The symbols of the cleartext are substituted by others. There are several types:
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Simple Monoalphabetic Substitution&lt;/em&gt;: Each symbol of the cleartext is replaced by another one.&lt;/p&gt;

        &lt;p&gt;An example of this cipher is the caesar cipher:&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cleartext:         TREE
ciphertext:        AYLL
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Polygraphic Monoalphabetic Substitution&lt;/em&gt;: Several symbols are replaced by several others.&lt;/p&gt;

        &lt;p&gt;An example of this type of cipher is the Play Fair cipher:&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cleartext:         TREE
ciphertext:        ODKUKU
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Polyalphabetic substitution&lt;/em&gt;: Use several monoalphabetic substitutions as you encrypt the cleartext.&lt;/p&gt;

        &lt;p&gt;An example of this type of cipher is the Vigenère cipher:&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cleartext:         TREE
key:               ABCD
ciphertext:        TSGH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;One Time Pad&lt;/em&gt;: Use a key as big as the cleartext. The key is independent from the text.&lt;/p&gt;

        &lt;p&gt;To encrypt and to decrypt you use the &lt;em&gt;XOR&lt;/em&gt; function:&lt;/p&gt;
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cleartext:         TREE
key:               QWER
ciphertext:        JNIV
key:               QWER
cleartext:         TREE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Transposition&lt;/strong&gt;: The symbols of the cleartext get permutated. In other words, it reorders the symbols taking them by blocks.&lt;/p&gt;

    &lt;p&gt;This is tribial to cryptoanalyze, so that’s no good my friend.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;enigma-machine&quot;&gt;ENIGMA machine:&lt;/h3&gt;

&lt;p&gt;A set of 3 cylinders that rotate on their own axis. In each cylinder there are 26 contacts (as for 26 letters), and each contact is connected to another one of the next cylinder. Each cylinder is a cryptosystem that does Polyalphabetic Substitution of period 26. Each cylinder is connected to the next, as a cascade.&lt;/p&gt;

&lt;p&gt;There are 26x26x26 = 17573 substitution alphabets before the system loops.&lt;/p&gt;

&lt;p&gt;With 5 cylinders, that number scalates up to 11881376. This is the base of the &lt;em&gt;crypt&lt;/em&gt; command of &lt;em&gt;UNIX&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;standard-encryption&quot;&gt;Standard encryption&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;DES&lt;/em&gt; (which descents from the LUCIFER cipher, created by IBM) was adopted by the NIST in 1977 to be the Data Encryption Standard.&lt;/p&gt;

&lt;p&gt;It encrypts 64 bit blocks using 56 bits keys.&lt;/p&gt;

&lt;p&gt;Throughout 19 stages and 16 iterations it transforms 64 bits of the cleartext into 64 bits of the ciphertext.&lt;/p&gt;

&lt;p&gt;Being a symmetric cipher, the algorithms used in encryption and decryption are the same.&lt;/p&gt;

&lt;p&gt;The following scheme shows the bit-level algorithm:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-des-diagram.gif&quot; alt=&quot;DES diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;DES&lt;/em&gt; cipher can operate in four different modes, in order to be able to encrypt blocks of data of different lenghts. These modes of operation are the following:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;ECB&lt;/em&gt;&lt;/strong&gt;: Stands for &lt;em&gt;Electronic CodeBook&lt;/em&gt;: The simplest mode, as it ciphers 64 bit blocks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;CBC&lt;/em&gt;&lt;/strong&gt;: Stands for &lt;em&gt;Cipher Block Chaining&lt;/em&gt;: Uses the last encrypted block to do a XOR operation against the current block to encrypt. For this reason, it needs an initialization block that has to be known between both the encryption and the decryption algorithm.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;CFB&lt;/em&gt;&lt;/strong&gt;: Stands for &lt;em&gt;Cipher FeedBack&lt;/em&gt;: This mode allows the encryption algorithm to encrypt data of any size. As the last mode, this one needs an initialization block too, as it needs the last encrypted block to fill the empty bits of the 64 block. If the block to cipher is smaller than 64 bits, the remaining bits get filled with the bits from the previous encrypted block, resulting in a 64 bit block that can now be encrypted.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;OFB&lt;/em&gt;&lt;/strong&gt;: Stands for &lt;em&gt;Output FeedBack&lt;/em&gt;: Works the same as the Cipher FeedBack, but instead of chaining the encryption after the XOR operation, it does it before it. The advantage of this mode is that a transmission error in one block does not affect the rest of the blocks.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;3DES&lt;/em&gt;: Stands for Triple DES, as it uses three 56 bit keys (one for each stage). Two of those keys are the same (for the even stages, the first and the third) and one is unique (for the odd stage, the second).&lt;/p&gt;

&lt;p&gt;Its time complexity is 2^(120-log2(n)) such as n=plaintext lenght.&lt;/p&gt;

&lt;h3 id=&quot;idea&quot;&gt;IDEA&lt;/h3&gt;

&lt;p&gt;It stands for &lt;em&gt;International Data Encryption Algorithm&lt;/em&gt;, uses 64 bit blocks and 128 bit keys.&lt;/p&gt;

&lt;p&gt;It has 8 iterations and a final stage that transforms everything into a 64 bit ciphertext block and the same modes of operation as the &lt;em&gt;DES&lt;/em&gt; algorithm.&lt;/p&gt;

&lt;h3 id=&quot;aes&quot;&gt;AES&lt;/h3&gt;

&lt;p&gt;Winner of the 1997 public contest promoted by the NIST whose purpose was to replace the &lt;em&gt;3DES&lt;/em&gt; algorithm.&lt;/p&gt;

&lt;p&gt;This algorithm is a part of the &lt;em&gt;Rijndael&lt;/em&gt; algorithm (&lt;em&gt;Joan Daemen &amp;amp; Rijmen&lt;/em&gt;), as the &lt;em&gt;Rijndael&lt;/em&gt; allows several different block and key sizes.&lt;/p&gt;

&lt;p&gt;The official release of the AES can be found &lt;a href=&quot;https://csrc.nist.gov/csrc/media/publications/fips/197/final/documents/fips-197.pdf&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some particular attributes of this algorithm are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Works with bytes.&lt;/li&gt;
  &lt;li&gt;Does operations with the body F256.&lt;/li&gt;
  &lt;li&gt;Uses its own arithmetic operations (sum, product).&lt;/li&gt;
  &lt;li&gt;Key size can be 128, 192 or 256 bits.&lt;/li&gt;
  &lt;li&gt;Block size of 128 bits.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;asymmetric-cipher&quot;&gt;Asymmetric cipher&lt;/h3&gt;

&lt;p&gt;Using two keys instead of one, it supposes a revolution in cryptology, as it solves two problems that are complex to solve with a secret key:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Key distribution.&lt;/li&gt;
  &lt;li&gt;Digital signature.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It is based on a series of new elemental transformations that were discovered at the time. Instead of transformations and substitutions, mathematic transformations are used.&lt;/p&gt;

&lt;p&gt;The requirements for these type of algorithms are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The keys &lt;strong&gt;can be&lt;/strong&gt; different.&lt;/li&gt;
  &lt;li&gt;One algorithm and key for encryption and another pair for decryption.&lt;/li&gt;
  &lt;li&gt;Impossible to compute one of the keys knowing the other one and the cipher algorithm.&lt;/li&gt;
  &lt;li&gt;Optionally, the keys are interchangeable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic scheme is presented in the next diagram:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-asymmetric-cipher.png&quot; alt=&quot;Asymmetric cipher diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Diffie-Hellman&lt;/em&gt; rules:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Easy for a computer to generate a pair of keys (public and private).&lt;/li&gt;
  &lt;li&gt;Easy encryption, in computing terms.&lt;/li&gt;
  &lt;li&gt;Knowing the private key, the decryption must be easy.&lt;/li&gt;
  &lt;li&gt;Impossible to obtain the private key from the public key.&lt;/li&gt;
  &lt;li&gt;Impossible to obtain the cleartext if only the public key is known.&lt;/li&gt;
  &lt;li&gt;Optionally, the encryption and decryption algorithms can be applied in any order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the last requirement is met, now we are able to use this algorithm for:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Authentication: Identification and validation.&lt;/li&gt;
  &lt;li&gt;Digital signature: The message is signed with the private key, and only if the signing person is the one that claims to be, the signature validates using the public key.&lt;/li&gt;
  &lt;li&gt;Does not guarantee confidentiallity.&lt;/li&gt;
  &lt;li&gt;Guarantees integrity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;rsa&quot;&gt;RSA&lt;/h3&gt;

&lt;p&gt;One of the most used ones, since it was created in 1977 by the &lt;em&gt;MIT&lt;/em&gt; investigators Ron &lt;strong&gt;R&lt;/strong&gt;ivest, Adi &lt;strong&gt;S&lt;/strong&gt;hamir, Leonard &lt;strong&gt;A&lt;/strong&gt;dleman.&lt;/p&gt;

&lt;p&gt;It basis its robustness in the complexity of big numbers factorization, wich is really good, but it has its cons:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It uses very long keys when compared with the ones that the symmetric encryption ciphers use.&lt;/li&gt;
  &lt;li&gt;The algorithm is very demanding in computing terms.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;the-discrete-logarithm-problem&quot;&gt;The discrete logarithm problem&lt;/h4&gt;

&lt;p&gt;Given values for &lt;em&gt;a&lt;/em&gt;, &lt;em&gt;b&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt; such as &lt;em&gt;n&lt;/em&gt; is a prime number, the function &lt;em&gt;x&lt;/em&gt; = &lt;em&gt;a&lt;/em&gt;^&lt;em&gt;b&lt;/em&gt; mod &lt;em&gt;n&lt;/em&gt; is very easy to compute.&lt;/p&gt;

&lt;p&gt;But if you know the values of &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt;, finding the value of &lt;em&gt;b&lt;/em&gt; is very hard to compute if the values of &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt; are very large.&lt;/p&gt;

&lt;p&gt;This is the basis of the public key cryptography.&lt;/p&gt;

&lt;h4 id=&quot;prime-tests&quot;&gt;Prime tests&lt;/h4&gt;

&lt;p&gt;To check if a very large number is prime takes a lot of time (with large numbers N, the estimated distance between prime numbers is ln(N)), so there are several different tests we can do:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Miller-Rabin probability test.&lt;/li&gt;
  &lt;li&gt;AKS algorithm (since 2002).&lt;/li&gt;
  &lt;li&gt;Extended Euclides algorithm.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;02---security-services&quot;&gt;02 - Security services&lt;/h2&gt;

&lt;h3 id=&quot;related-to-the-message&quot;&gt;Related to the message&lt;/h3&gt;

&lt;h4 id=&quot;confidentiality&quot;&gt;Confidentiality&lt;/h4&gt;

&lt;p&gt;This is met with both types of encryption (symmetric and asymmetric).&lt;/p&gt;

&lt;h4 id=&quot;integrity&quot;&gt;Integrity&lt;/h4&gt;

&lt;p&gt;This guarantees that the received message has not been modified and is the exact same message that was sent.&lt;/p&gt;

&lt;p&gt;To do this, a one-way function (also known as hash function) generates a code that represents the message that will be sent.&lt;/p&gt;

&lt;p&gt;The hash is then stored and compared to the hash of the received message.&lt;/p&gt;

&lt;h4 id=&quot;message-authentication&quot;&gt;Message authentication&lt;/h4&gt;

&lt;p&gt;It’s the ability to guarantee the identity of the sender of the message.&lt;/p&gt;

&lt;p&gt;On paper it’s done via autograph.&lt;/p&gt;

&lt;p&gt;With symmetric encryption it can be done several ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Checksum.&lt;/li&gt;
  &lt;li&gt;MAC (Message Authentication Code).&lt;/li&gt;
  &lt;li&gt;Hash + key:
&lt;img src=&quot;/blog/images/sss-hash+key.PNG&quot; alt=&quot;Hash + key diagram&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;non-repudiation&quot;&gt;Non-repudiation&lt;/h4&gt;

&lt;p&gt;This means that a person cannot deny:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;That this person sent the message (this is done with digital signature).&lt;/li&gt;
  &lt;li&gt;That this person received the message (e.g. this is the double tick that WhatsApp has).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;related-to-the-entity&quot;&gt;Related to the entity&lt;/h3&gt;

&lt;h4 id=&quot;entity-authentication&quot;&gt;Entity authentication&lt;/h4&gt;

&lt;p&gt;The authentication is done by using a piece of information (generally a key or a password) that the agent that wants to authenticate has.&lt;/p&gt;

&lt;p&gt;Challenge-response authentication: The verifier sends a challenge to which the response must be a function applied to that. It can be done using:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Public key schemes.&lt;/li&gt;
  &lt;li&gt;Digital signature schemes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2FA for people: After the user has successfully introduced his access credentials, the system needs more information to let the user in. This can be one of three basic categories:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Something that the user knows.&lt;/li&gt;
  &lt;li&gt;Something that the user has.&lt;/li&gt;
  &lt;li&gt;Something that the user is.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hash-functions&quot;&gt;Hash functions&lt;/h4&gt;

&lt;p&gt;A hash is a function that assigns a fixed length value to data of any length.&lt;/p&gt;

&lt;p&gt;A good hash function must meet the following requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;H can be applied to messages of any length.&lt;/li&gt;
  &lt;li&gt;H produces output of a fixed length.&lt;/li&gt;
  &lt;li&gt;H(x) is easy to compute.&lt;/li&gt;
  &lt;li&gt;For a given hash &lt;em&gt;h&lt;/em&gt; is not feasible to find &lt;em&gt;m&lt;/em&gt;, such that H(m)=h.&lt;/li&gt;
  &lt;li&gt;For a given block &lt;em&gt;x&lt;/em&gt; is not feasible to find &lt;em&gt;y&lt;/em&gt;, such that H(x)=H(y).&lt;/li&gt;
  &lt;li&gt;It is computationally infeasible to find &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, such that H(x)=H(y).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;hash-vs-crc&quot;&gt;Hash vs CRC&lt;/h4&gt;

&lt;p&gt;A &lt;em&gt;hash&lt;/em&gt; is a one-way function, and it is designed to make difficult to find an entry that produces certain output value.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;CRC&lt;/em&gt; is designed to detect accidental changes in the data. &lt;strong&gt;Its purpose is not to protect against changes, but to detect them&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;some-hash-functions&quot;&gt;Some hash functions&lt;/h4&gt;

&lt;p&gt;MD5: Improvements over MD4 and MD2, slower but more secure. Produces 128 bit output.&lt;/p&gt;

&lt;p&gt;SHA-1: Secure Hash Algorithm, published in 1994. Similar to MD5 but this one produces 160 bit output.&lt;/p&gt;

&lt;p&gt;SHA-2: Set of functions (SHA-224, SHA-256, SHA-384, SHA-512), published in 2001.&lt;/p&gt;

&lt;p&gt;SHA-3: Set of functions published in 2015. Just a standard, not in use yet.&lt;/p&gt;

&lt;h3 id=&quot;digital-signature&quot;&gt;Digital signature&lt;/h3&gt;

&lt;p&gt;Properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Able to verify author, date and time.&lt;/li&gt;
  &lt;li&gt;Authentify content at the time of the sign.&lt;/li&gt;
  &lt;li&gt;Verifiable by third parties.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Requirements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bit pattern independent from the message to sign.&lt;/li&gt;
  &lt;li&gt;Signature issuer information to prevent falsification and impersonation and negation of the signature.&lt;/li&gt;
  &lt;li&gt;Easy to generate.&lt;/li&gt;
  &lt;li&gt;Easy to recognize and verify.&lt;/li&gt;
  &lt;li&gt;Impossible to fake (nor signature or message).&lt;/li&gt;
  &lt;li&gt;Must be practical to store a copy.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A message can be signed by more than one person, an it also can be signed by a supervisor.&lt;/p&gt;

&lt;h3 id=&quot;key-management&quot;&gt;Key management&lt;/h3&gt;

&lt;h4 id=&quot;symmetric-key-distribution&quot;&gt;Symmetric key distribution&lt;/h4&gt;

&lt;p&gt;There are several posibilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use of session keys.&lt;/li&gt;
  &lt;li&gt;KDC (Key Distribution Centre).&lt;/li&gt;
  &lt;li&gt;3 way protocol&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;public-key-distribution&quot;&gt;Public key distribution&lt;/h4&gt;

&lt;p&gt;To distribute public keys, the possibilities are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Public announcement: A secure channel is needed.&lt;/li&gt;
  &lt;li&gt;Public available directory: A big, reliable organization takes care of the manteinance.&lt;/li&gt;
  &lt;li&gt;Public key authority: Mantained by an authority. Need of having a trustable public key issued by the authority. The authority sends keys to the users that request them.&lt;/li&gt;
  &lt;li&gt;Public key certificate: X.509 certificates are a file digitally signed by a Certification Authority (CA). It links some data to an identity. Both sender and receiver trust the CA. A PKI standard is X.509.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ca&quot;&gt;CA&lt;/h4&gt;

&lt;p&gt;A CA is a trustable organization responsible of issuing certificates for users or servers.&lt;/p&gt;

&lt;p&gt;Local scope: Enterprise, campus or country: e.g. in Spain, FNMT and DNIe. Autosigned certificates.&lt;/p&gt;

&lt;p&gt;Global scope: We trust a certificate if it is signed by a trustable authority that we all trust. Two types of certification authorities networks, tree (PKI) and distributed (keyrings).&lt;/p&gt;

&lt;h3 id=&quot;secure-communication-protocols&quot;&gt;Secure communication protocols&lt;/h3&gt;

&lt;h4 id=&quot;ssl&quot;&gt;SSL&lt;/h4&gt;

&lt;p&gt;Standing for Secure Socket Layer, it was designed by Netscape Corporation for their Internet Browser.&lt;/p&gt;

&lt;p&gt;Works on the transport layer (TCP).&lt;/p&gt;

&lt;p&gt;The services it offers are the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Data compression.&lt;/li&gt;
  &lt;li&gt;Security: (Parameter negotiation, client-server authentication, data integrity and confidentiality).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stages:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Handshake: The parameters of the algorithms and the key length are determined between the both parts of the communications. The public keys are exchanged. The authentication is made via certificates.&lt;/li&gt;
  &lt;li&gt;Transference: Symmetric key determination and encrypted data exchange.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;tls&quot;&gt;TLS&lt;/h4&gt;

&lt;p&gt;Based on SSL 3.0, but not compatible with it.&lt;/p&gt;

&lt;p&gt;In contrast with SSL, TLS can reuse an already existing TCP connection, so it does not need dedicated ports to work. It is inmune to Man In The Middle type of attacks.&lt;/p&gt;

&lt;h4 id=&quot;ipsec&quot;&gt;IPsec&lt;/h4&gt;

&lt;p&gt;Collection of security protocols at network layer (IP).&lt;/p&gt;

&lt;p&gt;Two modes of operation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Transport mode: Protects the information send by the transport layer, this is, &lt;strong&gt;it only protects the TCP payload.&lt;/strong&gt;. This mode is useful on end-to-end communications.&lt;/li&gt;
  &lt;li&gt;Tunnel mode: &lt;strong&gt;Protects the original IP datagram, this is, everything&lt;/strong&gt;. This mode is useful if one of the ends does not support IPsec, e.g firewall, VPN.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-ipsec-modes.PNG&quot; alt=&quot;IPsec working modes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It has three protocols:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AH (Authentication Header): It provides origin authentication and integrity, but not confidentiality.&lt;/li&gt;
  &lt;li&gt;ESP (Encapsulating Security Payload): It provides origin authentication, integrity, and confidentiality too.&lt;/li&gt;
  &lt;li&gt;IKE: Security Asociations (SA). One-way relationship. For a two-way communication we use two SA, and one of them establishes the first time that a datagram is interchanged. This converts a connectionless protocol into a connection oriented one.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-sa-two-way.PNG&quot; alt=&quot;IPsec SA two way&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;03---operating-systems-security&quot;&gt;03 - Operating systems security&lt;/h2&gt;

&lt;h3 id=&quot;definitions-1&quot;&gt;Definitions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Threat: Any situation that endangers the security.&lt;/li&gt;
  &lt;li&gt;Vulnerability: Weakness that is susceptible of producing an error.&lt;/li&gt;
  &lt;li&gt;Exploit: Technique that allows the atacker to take advantage of certain vulnerability to break the security of a system.&lt;/li&gt;
  &lt;li&gt;Social engineering: The art of manipulating people so they give up confidential information.&lt;/li&gt;
  &lt;li&gt;APT: Advanced Persisten Threat.&lt;/li&gt;
  &lt;li&gt;Botnets: Net of compromised, infected computers that can be used to perform distributed attacks.&lt;/li&gt;
  &lt;li&gt;Risk: Latent probability of a security incident taking place.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vulnerabilities&quot;&gt;Vulnerabilities&lt;/h3&gt;

&lt;p&gt;Every system has vulnerabilities.&lt;/p&gt;

&lt;p&gt;There are some strategies against them:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Security backups.&lt;/li&gt;
  &lt;li&gt;Risk analysis.&lt;/li&gt;
  &lt;li&gt;Suspicious events detection.&lt;/li&gt;
  &lt;li&gt;Constant revision of the security of the organisation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The vulnerabilities must be classified. For that we have:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CVE (Common Vulnerabilites and Exposures): A unique ID is assigned to every vulnerability that is found, so they can be classified and origanised. For example CVE-2017-0144 (Eternalblue).&lt;/li&gt;
  &lt;li&gt;CVSS (Common Vulnerability Scoring System): A system designed to classify vulnerabilities based in their attributes and their possible effects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;operating-systems&quot;&gt;Operating systems&lt;/h3&gt;

&lt;p&gt;Every OS provides tools and mechanisms to guarantee the security of the system.&lt;/p&gt;

&lt;h4 id=&quot;user-management&quot;&gt;User management&lt;/h4&gt;

&lt;p&gt;The users must have the lowest privilege they need to operate the system and they must belong to only the necessary groups.&lt;/p&gt;

&lt;h4 id=&quot;filesystem&quot;&gt;Filesystem&lt;/h4&gt;

&lt;p&gt;Needs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Confidentiality.&lt;/li&gt;
  &lt;li&gt;Disponibility.&lt;/li&gt;
  &lt;li&gt;Integrity.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Protections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Encrypted filesystems. They require the password at boot time.&lt;/li&gt;
  &lt;li&gt;Secure file deletion. Tools like Scrub and Shred.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Types of alterations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In the data.&lt;/li&gt;
  &lt;li&gt;In the programs. These ones are very dangerous.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;random-alterations&quot;&gt;Random alterations&lt;/h4&gt;

&lt;p&gt;Hardware alterations can be, for example:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Memory, disks, USBs… Those can be prevented by using RAID architecture and doing regular backups.&lt;/li&gt;
  &lt;li&gt;Power supply. A UPS prevents this of happening.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Software alterations are caused by:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Bad program design.&lt;/li&gt;
  &lt;li&gt;Programs in an inconsistent state.&lt;/li&gt;
  &lt;li&gt;Users with wrong privileges.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;alterations-prevention&quot;&gt;Alterations prevention&lt;/h4&gt;

&lt;p&gt;To prevent alterations from happening, several things can be done:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Use digital signature to check the authenticity of a file.&lt;/li&gt;
  &lt;li&gt;Use CRC and hashes to verify the integrity of a file.&lt;/li&gt;
  &lt;li&gt;Journaling: Log almost everything that happens in the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;log-files&quot;&gt;Log files&lt;/h3&gt;

&lt;p&gt;Their goal is to monitorize the system so in case something bad happens we can look the logs to figure out what the cause of the problem was.&lt;/p&gt;

&lt;p&gt;The logs:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Store important events.&lt;/li&gt;
  &lt;li&gt;Can be local or remote.&lt;/li&gt;
  &lt;li&gt;Detect errors.&lt;/li&gt;
  &lt;li&gt;Are produced by programs like Snare, ObserveIt, LogAnalyzer…&lt;/li&gt;
  &lt;li&gt;In Linux they are store in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/log&lt;/code&gt; directory:
    &lt;ul&gt;
      &lt;li&gt;syslog&lt;/li&gt;
      &lt;li&gt;messages&lt;/li&gt;
      &lt;li&gt;auth.log&lt;/li&gt;
      &lt;li&gt;utmp&lt;/li&gt;
      &lt;li&gt;wtmp&lt;/li&gt;
      &lt;li&gt;btmp&lt;/li&gt;
      &lt;li&gt;lastlog&lt;/li&gt;
      &lt;li&gt;debug&lt;/li&gt;
      &lt;li&gt;apache&lt;/li&gt;
      &lt;li&gt;daemon&lt;/li&gt;
      &lt;li&gt;kern.log&lt;/li&gt;
      &lt;li&gt;user.log&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;access-control&quot;&gt;Access control&lt;/h3&gt;

&lt;p&gt;The goal is to authenticate that someone is who they say they are.&lt;/p&gt;

&lt;p&gt;To do that, we check for something that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;They know.&lt;/li&gt;
  &lt;li&gt;They have.&lt;/li&gt;
  &lt;li&gt;They are.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The authentication system must satisfy several characteristics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Very reliable.&lt;/li&gt;
  &lt;li&gt;Economic.&lt;/li&gt;
  &lt;li&gt;Stand strong against certain attacks.&lt;/li&gt;
  &lt;li&gt;Acceptable by the users.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Password authentication system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Simple and cheap.&lt;/li&gt;
  &lt;li&gt;The responsibility lies with the user.&lt;/li&gt;
  &lt;li&gt;A hash of the password is stored.&lt;/li&gt;
  &lt;li&gt;If the passwords are not hashed with salt, the hashes can be susceptible to a Rainbow table attack.&lt;/li&gt;
  &lt;li&gt;To create strong passwords there are several systems out there, e.g. Diceware.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Card authentication system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Can be chipcards or smartcards.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Biometric authentication system:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Iris, palm of the hand, fingerprint,…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;secure-programming&quot;&gt;Secure programming&lt;/h3&gt;

&lt;p&gt;Secure code development, without vulnerabilities.&lt;/p&gt;

&lt;h3 id=&quot;vulnerabilities-1&quot;&gt;Vulnerabilities&lt;/h3&gt;

&lt;p&gt;In order to detect them, most of the time a pentest or a security audit is necessary.&lt;/p&gt;

&lt;p&gt;Types of vulnerabilities:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Buffer overflow: Until 2004 they were the cause of half of the total discovered vulnerabilities.&lt;/p&gt;

    &lt;p&gt;To get rid of them, there are several things that can be done:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Never trust the user inputs.&lt;/li&gt;
      &lt;li&gt;Disable code execution on the stack.&lt;/li&gt;
      &lt;li&gt;Use stackguard.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Race conditions: Not use of critical sections. To fix them, use the tools that the operating system gives you e.g. semaphores.&lt;/li&gt;
  &lt;li&gt;Common programming errors: Improper file management, not checking the inputs correctly, XSS…&lt;/li&gt;
  &lt;li&gt;SQLi: One of the most common vulnerability that webpages have. Always check the user input before doing consults to a database with it.&lt;/li&gt;
  &lt;li&gt;Rootkits: Persistent threat that provides the attacker root privileges when wanted. Very hard to detect, as they work at kernel level, but there are several tools like chkrootkit and rkhunter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;04---network-security&quot;&gt;04 - Network security&lt;/h2&gt;

&lt;p&gt;The Internet comes with challenges that were never thought about, as it allows everything to be available from anywhere in the world 24/7.&lt;/p&gt;

&lt;p&gt;The access control becomes harder. New security needs appear, to make safe services that were not made for so. e.g. WEP, GSM.&lt;/p&gt;

&lt;h3 id=&quot;types-of-attacks&quot;&gt;Types of attacks&lt;/h3&gt;

&lt;p&gt;Active, that can be easily detected but are very hard to prevent:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Interruption.&lt;/li&gt;
  &lt;li&gt;Fabrication.&lt;/li&gt;
  &lt;li&gt;Modification.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Passive, that are very hard to detect, but can erradicated with encryption and protections:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Interruption.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;network-security&quot;&gt;Network security&lt;/h3&gt;

&lt;p&gt;Only enable the necessary services and take countermeassures against their vulnerabilities.&lt;/p&gt;

&lt;p&gt;A firewall controls the packets that enter and exit the system.&lt;/p&gt;

&lt;p&gt;The network services can be:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Independent: Like any other program&lt;/li&gt;
  &lt;li&gt;Managed by &lt;em&gt;inetd&lt;/em&gt;: The daemon &lt;em&gt;inetd&lt;/em&gt; wakes up the process when needed, when not, it shuts them down. The behaviour can be configured in the file /etc/inetd.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-wrappers&quot;&gt;TCP wrappers&lt;/h4&gt;

&lt;p&gt;In order for this work, the programs must be compiled with &lt;em&gt;libwrap&lt;/em&gt; support.&lt;/p&gt;

&lt;p&gt;In the file &lt;em&gt;/etc/hosts.deny&lt;/em&gt; you specifiy the denied access, and in &lt;em&gt;/etc/hosts.allow&lt;/em&gt; you specify the allowed access.&lt;/p&gt;

&lt;h4 id=&quot;sysctl&quot;&gt;Sysctl&lt;/h4&gt;

&lt;p&gt;This allows us to communicate with the kernel in execution time. By editing the file /etc/sysctl.conf we can do things like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Ignore all ping requests: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.ipv4.icmp_echo_ignore_all=1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Ignore all ping broadcasts: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.ipv4.icmp_echo_ignore_broadcasts=1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Refuse to send packets with invalid IP addresses: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.ipv4.conf.all.rp_filter=1&lt;/code&gt; (Can be 0,1 or 2).&lt;/li&gt;
  &lt;li&gt;Log the packets with an invalid IP: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;net.ipv4.conf.all.log_martians=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To apply the changes run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sysctl -p&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;service-checking&quot;&gt;Service checking&lt;/h4&gt;

&lt;p&gt;To check the network services that are running, tools like &lt;em&gt;netstat&lt;/em&gt; and &lt;em&gt;nmap&lt;/em&gt; can be used.&lt;/p&gt;

&lt;h3 id=&quot;attacks&quot;&gt;Attacks&lt;/h3&gt;

&lt;h4 id=&quot;dos&quot;&gt;DoS&lt;/h4&gt;

&lt;p&gt;Connectivity lost due to port, network or resources saturation. Up to 3 years in jail.&lt;/p&gt;

&lt;h4 id=&quot;ip-spoofing&quot;&gt;IP spoofing&lt;/h4&gt;

&lt;p&gt;Send packets with a fake origin IP.&lt;/p&gt;

&lt;p&gt;If you send ICMP ECHO REQUEST packages with the victim IP as the origin one, this attack is called &lt;em&gt;smurfing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nowadays the routers don’t allow to send broadcast datagrams outside their subnets of reach.&lt;/p&gt;

&lt;h4 id=&quot;arp-spoofing-poisoning&quot;&gt;ARP spoofing, poisoning&lt;/h4&gt;

&lt;p&gt;Change the IP linked to a MAC. This can be done in a switched LAN.&lt;/p&gt;

&lt;p&gt;To discover the hosts that are in reach: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arpscan -a&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To poison two victims a tool named &lt;em&gt;arpspoof&lt;/em&gt; can be used, in conjunction with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo 1 &amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Countemeasures:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Router with static MAC.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;arpwatch&lt;/code&gt; to monitorize the network.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tcp-syn-flood&quot;&gt;TCP SYN flood&lt;/h4&gt;

&lt;p&gt;Takes advantage of the 3-way-handshake, as the server allocates resources when a SYN packet is received, and they are not released after 75 seconds have passed. It results in a &lt;em&gt;OOM&lt;/em&gt; most of the time.&lt;/p&gt;

&lt;p&gt;This can be erradicated:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;SYN cookies: Only allocate resources when the final message is received.&lt;/li&gt;
  &lt;li&gt;SYN cache: Independent structure that can’t grow infinitely. By default in FreeBSD.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;udp-flood&quot;&gt;UDP flood&lt;/h4&gt;

&lt;p&gt;Send packets to random ports, and cause the victim to send ICMP destination unreachable messages back to the attacker (or fake the origin IP and put another target).&lt;/p&gt;

&lt;h4 id=&quot;dns-spoofing&quot;&gt;DNS spoofing&lt;/h4&gt;

&lt;p&gt;Return a fake IP after a DNS query is made and captured by the attacker.&lt;/p&gt;

&lt;h4 id=&quot;web-spoofing&quot;&gt;Web spoofing&lt;/h4&gt;

&lt;p&gt;These days this is called phising.&lt;/p&gt;

&lt;h4 id=&quot;mail-spoofing&quot;&gt;Mail spoofing&lt;/h4&gt;

&lt;p&gt;Saying in an email that the sender is another person.&lt;/p&gt;

&lt;h4 id=&quot;mitm&quot;&gt;MITM&lt;/h4&gt;

&lt;p&gt;Signifficant attacks when Diffie-Hellman without authentication is being used.&lt;/p&gt;

&lt;h3 id=&quot;iptables&quot;&gt;Iptables&lt;/h3&gt;

&lt;p&gt;Iptables is a tool that the Linux system provides to manage &lt;em&gt;netfilter&lt;/em&gt;, which is a very powerful packet manipulation framework provided by the kernel.&lt;/p&gt;

&lt;p&gt;It is a stateful firewall. This means that it will only examine the first packet of a connection, make a decission, and treat the rest of the packets the same way.&lt;/p&gt;

&lt;p&gt;The framework consists of three main tables:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Filter&lt;/li&gt;
  &lt;li&gt;Mangle&lt;/li&gt;
  &lt;li&gt;Nat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also has another two tables:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Raw: For managing the state of packets (as netfiler is a stateful firewall).&lt;/li&gt;
  &lt;li&gt;Security: Only used to set internal SELinux security context marks on packets.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And each table has several chains linked to it (not every tables has all the chains):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;PREROUTING&lt;/li&gt;
  &lt;li&gt;INPUT&lt;/li&gt;
  &lt;li&gt;FORWARD&lt;/li&gt;
  &lt;li&gt;OUTPUT&lt;/li&gt;
  &lt;li&gt;POSTROUTING&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following diagram represents the flow of the packets through the chains:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-iptables-tables.jfif&quot; alt=&quot;IPtables tables&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are several options that can apply to a packet:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;ACCEPT&lt;/li&gt;
  &lt;li&gt;DROP&lt;/li&gt;
  &lt;li&gt;REJECT&lt;/li&gt;
  &lt;li&gt;LOG&lt;/li&gt;
  &lt;li&gt;SNAT&lt;/li&gt;
  &lt;li&gt;DNAT&lt;/li&gt;
  &lt;li&gt;MASQUERADE&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tools&quot;&gt;Tools&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Ettercap&lt;/em&gt;, now replaced by Bettercap.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Packit&lt;/em&gt;: A tool to craft network packets and to do tests with.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hping3&lt;/em&gt;: Like ping, but better.&lt;/p&gt;

&lt;h3 id=&quot;sniffer-detection&quot;&gt;Sniffer detection&lt;/h3&gt;

&lt;p&gt;This is a very hard thing to do, but there are some tools that can help you to do so, like &lt;em&gt;Sniffdet&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To make if more difficult to sniff network traffic, here are some things that can be done:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Network and hosts segmentation using switches (but you gotta be careful with ARP poisoning).&lt;/li&gt;
  &lt;li&gt;Encrypted communications.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;snort&quot;&gt;SNORT&lt;/h3&gt;

&lt;p&gt;Snort is an IDS (Intrusion Detection System), specifically a NIDS.&lt;/p&gt;

&lt;p&gt;It’s got filters, rules, abnormal events detector and a module for making reports and managing alarms.&lt;/p&gt;

&lt;h2 id=&quot;05---general-concepts&quot;&gt;05 - General concepts&lt;/h2&gt;

&lt;p&gt;General culture concepts and knowledge:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Mirai botnet&lt;/em&gt;: Largest DDoS attack in history&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Wannacry&lt;/em&gt;: A classic&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Stuxnet worm&lt;/em&gt;: Targeted attack on Iranian nuclear facilities&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Security basis&lt;/em&gt;: Confidentiality, integrity and availability&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Other security basis&lt;/em&gt;: Authenticity, accountability and non-repudiation&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;More security basis&lt;/em&gt;: Privacy, anonymity, untraceability, unlinkability, unobservability&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Protection basis&lt;/em&gt;: Prevention, detection, reaction&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Software vulnerabilities exist for a reason and cannot be completely eliminated, but they can be avoided&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;06---x86-isa&quot;&gt;06 - x86 ISA&lt;/h2&gt;

&lt;p&gt;It is necessary to know how processors work to be able to understand how vulnerabilities can be exploited.&lt;/p&gt;

&lt;p&gt;Here will be explained the x86 and the x86_64 ISA of Intel processors, as Intel is the most common brand of processor (66% of the market).&lt;/p&gt;

&lt;h3 id=&quot;program-compilation-process&quot;&gt;Program compilation process&lt;/h3&gt;

&lt;p&gt;The process of compiling a program written in C/C++ is as shown in the following image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-compilation-process.png&quot; alt=&quot;Compilation process in C/C++&quot; title=&quot;Compilation process in C/C++&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you compile a C program with the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-save-temps&lt;/code&gt;, &lt;em&gt;gcc&lt;/em&gt; won’t delete &lt;em&gt;.i&lt;/em&gt; and &lt;em&gt;.s&lt;/em&gt; files:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌─[javier@torre]─[~]
└──╼ &lt;span class=&quot;nv&quot;&gt;$cat&lt;/span&gt; sample.c
&lt;span class=&quot;c&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#include &amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

int main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;int argc, char &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; argv&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        fprintf&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stdout, &lt;span class=&quot;s2&quot;&gt;&quot;[*] This is a sample program&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
┌─[javier@torre]─[~]
└──╼ &lt;span class=&quot;nv&quot;&gt;$gcc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-save-temps&lt;/span&gt; sample.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; sample
┌─[javier@torre]─[~]
└──╼ &lt;span class=&quot;nv&quot;&gt;$ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
total 76
&lt;span class=&quot;nt&quot;&gt;-rwxr-xr-x&lt;/span&gt; 1 javier javier 16656 Dec 12 23:05 sample
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 javier javier   148 Dec 12 23:05 sample.c
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 javier javier 42336 Dec 12 23:05 sample.i
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 javier javier  1632 Dec 12 23:05 sample.o
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 javier javier   593 Dec 12 23:05 sample.s
┌─[javier@torre]─[~]
└──╼ &lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;/sample
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; This is a sample program
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Assembly code is written using mnemonics. To demostrate it, the following is an example of assembly code for the Motorola 6809 processor (the first assembly language I learned):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-assembly&quot;&gt;; hello.asm: Simple program that prints the string on the screen

        .area PROG (ABS)

        .org 0x100          ; Start at 0x100
string: .ascii &quot;Hello sir&quot;
        .byte   10          ; 10 = CTRL+J = \cr
        .byte   0           ; 0  = CTRL+@ = \lf

        .globl program      ; Here starts the code
program:
        ldx #string
loop:   lda ,x+
        beq end
        sta 0xFF00          ; Print on the screen
        bra loop
end:    clra
        sta 0xFF01

        .org 0xFFFE         ; RESET vector
        .word program

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;concepts&quot;&gt;Concepts&lt;/h3&gt;

&lt;p&gt;Machine code: Code that can be directly executed by the computer without further translation.&lt;/p&gt;

&lt;p&gt;Bytecode: Code that can be executed by a virtual machine, for example, Java creates this, and then the Java virtual machine runs it.&lt;/p&gt;

&lt;p&gt;Opcode: Number that represents an operation (OPeration CODE).&lt;/p&gt;

&lt;p&gt;Mnemonics: Instructions in assembly language. It can be a string or an opcode with zero or more arguments.&lt;/p&gt;

&lt;h3 id=&quot;x86-registers&quot;&gt;x86 registers&lt;/h3&gt;

&lt;p&gt;A register is a form of storage that the processor has. They’re really fast to access and to operate with them, and they are different from the main memory, as they are inside the processor.&lt;/p&gt;

&lt;p&gt;There are regiters for different kinds of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;General purpose: Used for storing immediate values and memory addresses.&lt;/li&gt;
  &lt;li&gt;Segment: Used for identifying segments in memory.&lt;/li&gt;
  &lt;li&gt;Program status and control (flag registers): They store the flags that indicate the result of an arithmetic operation (overflow, zero, …).&lt;/li&gt;
  &lt;li&gt;Instruction pointer: Also named &lt;em&gt;PC&lt;/em&gt; as for &lt;em&gt;Program Counter&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;general-purpose-registers-on-x86&quot;&gt;General purpose registers on x86&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;EAX: Extended Accumulator register.&lt;/li&gt;
  &lt;li&gt;EBX: Extended Base register, a base pointer for memory access.&lt;/li&gt;
  &lt;li&gt;ECX: Extended Counter register, counter for loop/string operations.&lt;/li&gt;
  &lt;li&gt;EDX: Extended Data register, a pointer for I/O.&lt;/li&gt;
  &lt;li&gt;ESI: Extended Source Index pointer for string operations.&lt;/li&gt;
  &lt;li&gt;EDI: Extended Destination Index pointer for string operations.&lt;/li&gt;
  &lt;li&gt;EBP: Extended Base Pointer, a pointer to data on the stack.&lt;/li&gt;
  &lt;li&gt;ESP: Extended Stack Pointer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following image illustrates the mapping of the registers:
&lt;img src=&quot;/blog/images/sss-x86-general-purpose-registers.png&quot; alt=&quot;x86 General purpose registers&quot; title=&quot;x86 General purpose registers&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;instruction-pointer-register-on-x86&quot;&gt;Instruction pointer register on x86&lt;/h3&gt;

&lt;p&gt;The EIP (Extended Instruction Pointer) points to the next instruction to be executed. It can only be accesed by using branch instructions (call, jmp, ret).&lt;/p&gt;

&lt;h3 id=&quot;program-status-and-control-flag-registers&quot;&gt;Program status and control (flag registers)&lt;/h3&gt;

&lt;p&gt;The EFLAGS register has several flags:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CF: Carry Flag.&lt;/li&gt;
  &lt;li&gt;PF: Parity Flag.&lt;/li&gt;
  &lt;li&gt;ZF: Zero Flag.&lt;/li&gt;
  &lt;li&gt;TF: Trap Flag.&lt;/li&gt;
  &lt;li&gt;OF: Overflow Flag.&lt;/li&gt;
  &lt;li&gt;SF: Sign Flag.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;data-types&quot;&gt;Data types&lt;/h3&gt;

&lt;p&gt;There are several data types, each one being the double of the previous:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Byte: 8 bits.&lt;/li&gt;
  &lt;li&gt;Word: 16 bits.&lt;/li&gt;
  &lt;li&gt;Double word: 32 bits.&lt;/li&gt;
  &lt;li&gt;Quad word: 64 bits. (Combining EDX and EAX into one)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;x86-endianness&quot;&gt;x86 endianness&lt;/h3&gt;

&lt;p&gt;The x86 uses the little endian format to store information in memory. This means that, for example, the word &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x28A1427F&lt;/code&gt; will be stored as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x7F42A128&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;data-movement&quot;&gt;Data movement&lt;/h3&gt;

&lt;p&gt;To move data, the x86 has the MOV instruction:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Immediate to register: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov eax, 0x41&lt;/code&gt;. This will put the value 0x41 in the EAX register.&lt;/li&gt;
  &lt;li&gt;Register to register: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov eax, ebx&lt;/code&gt;. This will put whatever is on the EAX register into the EBX register.&lt;/li&gt;
  &lt;li&gt;Immediate to memory: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov [eax], 0x41&lt;/code&gt;. This will put 0x41 in the memory address that the EAX register contains.&lt;/li&gt;
  &lt;li&gt;Register to memory: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov [eax], ebx&lt;/code&gt;. This will put whatever is in the EBX register in the memory address that the EAX register contains.&lt;/li&gt;
  &lt;li&gt;Memory to register: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov eax, [ebx]&lt;/code&gt;. This will put whatever is in the memory address that the EBX register contains into the EAX register.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lea&quot;&gt;LEA&lt;/h3&gt;

&lt;p&gt;This instruction will Load the Effective Address into a register. Example: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lea eax, [ebx+0x04]&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;arithmetic-instructions&quot;&gt;Arithmetic instructions&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add eax, ebx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sub eax, ebx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;inc edi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dec esi&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;bit-level-instructions&quot;&gt;Bit-level instructions&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and eax, ebx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;or eax, ebx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xor ebx, eax&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;not eax&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;jump-instructions&quot;&gt;Jump instructions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Unconditional:&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp eax&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jmp [ebx]&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conditional:&lt;/p&gt;

    &lt;p&gt;Preceeded by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp eax, ebx&lt;/code&gt; most of the time.&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jle eax, ebx&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jz ebx, 0x01&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-info-about-instructions&quot;&gt;More info about instructions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://en.wikibooks.org/wiki/X86_Assembly/Control_Flow&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://en.wikipedia.org/wiki/X86_instruction_listings&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;memory-segmentation-and-stack-operations&quot;&gt;Memory segmentation and stack operations&lt;/h3&gt;

&lt;p&gt;In order to exploit security bugs, most of the time you’ll have to overwrite or overflow a portion of the memory into another one.&lt;/p&gt;

&lt;p&gt;The following image illustrates the structure of a C program:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/sss-c-memory-diagram.png&quot; alt=&quot;C program memory diagram&quot; title=&quot;C program memory diagram&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;stack&quot;&gt;Stack&lt;/h3&gt;

&lt;p&gt;The stack is a LIFO structure, and it grows downwards.&lt;/p&gt;

&lt;p&gt;It has two operations, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pop&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The ESP points to the address of the oldest pushed data that is currently on the stack.&lt;/p&gt;

&lt;h3 id=&quot;function-calls&quot;&gt;Function calls&lt;/h3&gt;

&lt;p&gt;To call a function, you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;call&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;Once you call a function, the return address (next instruction after the function ends) is pushed to the stack.&lt;/p&gt;

&lt;p&gt;The return of the function is performed via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ret&lt;/code&gt; instruction.&lt;/p&gt;

&lt;p&gt;Before calling a function, there is what is called a function prologe. Its purpose is to backup the selected registers and save space for the local variables.&lt;/p&gt;

&lt;p&gt;After calling a function, everything that was done in the prologue is done backwards before issuing the return.&lt;/p&gt;

&lt;h3 id=&quot;function-invocation&quot;&gt;Function invocation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Windows:&lt;/p&gt;

    &lt;p&gt;First four arguments are loaded into RCX, RDX, R8, R9.&lt;/p&gt;

    &lt;p&gt;The rest of them are passed trough the stack from right to left.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Linux:&lt;/p&gt;

    &lt;p&gt;First six arguments are loaded into RDI, RSI, RDX, RCX, R8, R9.&lt;/p&gt;

    &lt;p&gt;The rest of them are passed trough the stack from right to left.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;exercises&quot;&gt;Exercises&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Prepare the system:&lt;/p&gt;

    &lt;p&gt;You’ll need a Linux system with &lt;em&gt;gcc&lt;/em&gt;, &lt;em&gt;gdb&lt;/em&gt; and &lt;em&gt;nasm&lt;/em&gt; installed on it.&lt;/p&gt;

    &lt;p&gt;You can do so by running the following command:&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;gcc gdb nasm &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Now configure &lt;em&gt;gdb&lt;/em&gt; to show disassemblies in the intel format (we don’t want the AT&amp;amp;T format) by running this command:&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'set disassembly-flavor intel'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.gdbinit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If you want to use &lt;em&gt;objdump&lt;/em&gt; for disassemblies, use the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-M intel&lt;/code&gt; to get the output in the intel format.&lt;/p&gt;

    &lt;p&gt;An example against the sample program that we compiled before:&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌─[javier@torre]─[~/sample]
└──╼ &lt;span class=&quot;nv&quot;&gt;$objdump&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-M&lt;/span&gt; intel sample &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-15&lt;/span&gt;
   
sample:     file format elf64-x86-64
   
   
Disassembly of section .init:
   
0000000000001000 &amp;lt;_init&amp;gt;:
    1000:       48 83 ec 08             sub    rsp,0x8
    1004:       48 8b 05 &lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;2f 00 00    mov    rax,QWORD PTR &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;rip+0x2fdd]        &lt;span class=&quot;c&quot;&gt;# 3fe8 &amp;lt;__gmon_start__&amp;gt;&lt;/span&gt;
    100b:       48 85 c0                &lt;span class=&quot;nb&quot;&gt;test   &lt;/span&gt;rax,rax
    100e:       74 02                   je     1012 &amp;lt;_init+0x12&amp;gt;
    1010:       ff d0                   call   rax
    1012:       48 83 c4 08             add    rsp,0x8
    1016:       c3                      ret
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;03---runtime-attacks&quot;&gt;03 - Runtime attacks&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;

&lt;h2 id=&quot;05---defenses-against-runtime-attacks&quot;&gt;05 - Defenses against runtime attacks&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;

&lt;h2 id=&quot;04---code-reuse-attacks-and-defenses&quot;&gt;04 - Code reuse: Attacks and defenses&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;

&lt;h2 id=&quot;06---web-security&quot;&gt;06 - Web security&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;

&lt;h2 id=&quot;07---blockchain&quot;&gt;07 - Blockchain&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;

&lt;h2 id=&quot;08---smart-contracts&quot;&gt;08 - Smart contracts&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;

&lt;h2 id=&quot;09---side-channel-attacks&quot;&gt;09 - Side channel attacks&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;

&lt;h2 id=&quot;10-hardware-security&quot;&gt;10-Hardware security&lt;/h2&gt;

&lt;p&gt;Coming soon&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">In this article I will try to explain by my own words every single thing that I learned during my Computer Engineering degree when it comes to security of software systems.</summary></entry><entry><title type="html">WSL2 and VirtualBox/VMware at the same time</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2020/11/13/WSL-and-VirtualBox-VMware-at-the-same-time.html" rel="alternate" type="text/html" title="WSL2 and VirtualBox/VMware at the same time" /><published>2020-11-13T23:00:00+01:00</published><updated>2020-11-13T23:00:00+01:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2020/11/13/WSL-and-VirtualBox-VMware-at-the-same-time</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2020/11/13/WSL-and-VirtualBox-VMware-at-the-same-time.html">&lt;p&gt;If after installing &lt;em&gt;WSL2&lt;/em&gt; on a system that had &lt;em&gt;VMware&lt;/em&gt; or &lt;em&gt;VirtualBox&lt;/em&gt; previously installed, you get an error that says something like this one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.stack.imgur.com%2FKxtXR.png&amp;amp;f=1&amp;amp;nofb=1&quot; alt=&quot;CredentialGuard&quot; title=&quot;CredentialGuard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You just found that your system can’t have &lt;em&gt;WSL2&lt;/em&gt; and &lt;em&gt;VMware&lt;/em&gt; or &lt;em&gt;VirtualBox&lt;/em&gt; running at the same time, because &lt;em&gt;WSL2&lt;/em&gt; uses the Hyper-V architecture for its virtualization, and some third party tools such as the mentioned before cannot work when Hyper-V is in use.&lt;/p&gt;

&lt;p&gt;At this point you might be thinking “&lt;strong&gt;Wait, so you’re telling me that I have to choose one or the other?!?!&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;The answer is “&lt;strong&gt;No, but you’ll have to choose one of three options&lt;/strong&gt;”&lt;/p&gt;

&lt;p&gt;The options you have are those:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Manually change which virtual machine plattform will be possible to use at a certain time.&lt;/p&gt;

    &lt;p&gt;Open the Powershell as Administrator and run:&lt;/p&gt;

    &lt;p&gt;If you want to enable &lt;em&gt;VMware&lt;/em&gt;:&lt;/p&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bcdedit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hypervisorlaunchtype&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If you want to enable &lt;em&gt;Hyper-V&lt;/em&gt; and &lt;em&gt;WSL2&lt;/em&gt;:&lt;/p&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bcdedit&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;/set&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hypervisorlaunchtype&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Big thanks to &lt;em&gt;Jesús Martín Juan&lt;/em&gt; for fixing two typos. You can check this webpage &lt;a href=&quot;https://jesusemejota.github.io&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Downgrade from &lt;em&gt;WSL2&lt;/em&gt; to &lt;em&gt;WSL1&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;As you may know, the first version of &lt;em&gt;WSL&lt;/em&gt; is not a real kernel, instead, it acts as a translator from the &lt;em&gt;Linux&lt;/em&gt; kernel to the &lt;em&gt;Windows&lt;/em&gt; kernel. Thus, it is more limited than &lt;em&gt;WSL2&lt;/em&gt;, but if you don’t need any of the improvements that &lt;em&gt;WSL2&lt;/em&gt; has over &lt;em&gt;WSL1&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;You can downgrade your virtual machines to &lt;em&gt;WSL1&lt;/em&gt; with the following command:&lt;/p&gt;
    &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wsl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--set-version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;distribution-name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Update &lt;em&gt;VMware&lt;/em&gt; or &lt;em&gt;VirtualBox&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;Many people have reached out to the developers since &lt;em&gt;WSL2&lt;/em&gt; became available, and &lt;em&gt;Oracle&lt;/em&gt; and &lt;em&gt;VMware&lt;/em&gt; have developed their solutions for this problem.&lt;/p&gt;

    &lt;p&gt;In case of &lt;em&gt;VMware&lt;/em&gt;, they released the 15.5.6 version that solves this problem.&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/images/vmware-15-5-6.PNG&quot; alt=&quot;VMware-15-5-6&quot; title=&quot;VMware-15-5-6&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;You can get more info about that &lt;a href=&quot;https://blogs.vmware.com/workstation/2020/01/vmware-workstation-tech-preview-20h1.html&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;For more info about &lt;em&gt;VirtualBox&lt;/em&gt;, you can check the &lt;a href=&quot;https://github.com/MicrosoftDocs/WSL/issues?q=is%3Aissue+virtualbox+sort%3Acomments-desc&quot;&gt;&lt;strong&gt;VirtualBox issue discussions in the WSL repo on GitHub&lt;/strong&gt;&lt;/a&gt; and the &lt;a href=&quot;https://www.virtualbox.org/wiki/Changelog-6.0&quot;&gt;&lt;strong&gt;VirtualBox changelog&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">If after installing WSL2 on a system that had VMware or VirtualBox previously installed, you get an error that says something like this one:</summary></entry><entry><title type="html">Rubber Ducky with Digispark ATtiny85</title><link href="https://javiervidrua.github.io/blog/jekyll/update/2020/11/06/rubber-ducky-with-digispark-attiny85.html" rel="alternate" type="text/html" title="Rubber Ducky with Digispark ATtiny85" /><published>2020-11-06T23:00:00+01:00</published><updated>2020-11-06T23:00:00+01:00</updated><id>https://javiervidrua.github.io/blog/jekyll/update/2020/11/06/rubber-ducky-with-digispark-attiny85</id><content type="html" xml:base="https://javiervidrua.github.io/blog/jekyll/update/2020/11/06/rubber-ducky-with-digispark-attiny85.html">&lt;p&gt;Do you want to have a &lt;a href=&quot;https://shop.hak5.org/products/usb-rubber-ducky-deluxe&quot;&gt;&lt;em&gt;Rubber Ducky&lt;/em&gt;&lt;/a&gt; but you don’t want to spend 50$ on it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How about spending 2$ on a &lt;em&gt;Digispark&lt;/em&gt; and program it yourself?&lt;/strong&gt; If that sounds good, get your hands on one of those and follow these steps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notice&lt;/em&gt;: This tutorial is intended to be followed from a Windows 10 system.&lt;/p&gt;

&lt;h2 id=&quot;get-started&quot;&gt;Get started&lt;/h2&gt;
&lt;p&gt;The first thing is installing the drivers. To do so, go to &lt;a href=&quot;https://github.com/digistump/DigistumpArduino/releases&quot;&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; link and download the installer. Both &lt;em&gt;32&lt;/em&gt; and &lt;em&gt;64&lt;/em&gt; bit architectures are supported.&lt;/p&gt;

&lt;p&gt;Now you can stick the &lt;em&gt;Digispark ATtiny85&lt;/em&gt; in a &lt;em&gt;USB&lt;/em&gt; port and you should hear the Windows notification tone. Now if you go to the Device Manager, a new category named “&lt;em&gt;libusb-win32 Usb Devices&lt;/em&gt;” should appear. That’s good, now the system recognizes the &lt;em&gt;Digispark&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configure-the-arduino-ide&quot;&gt;Configure the Arduino IDE&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href=&quot;https://www.arduino.cc/en/software&quot;&gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; site and install the IDE, if you didn’t have it already installed on your system.&lt;/p&gt;

&lt;p&gt;Now we have to configure the IDE so it works with out Digispark:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Open the IDE and go to &lt;em&gt;File&lt;/em&gt; -&amp;gt; &lt;em&gt;Preferences&lt;/em&gt;.&lt;/p&gt;

    &lt;p&gt;In the field named “&lt;em&gt;Additional Boards Manager URLs&lt;/em&gt;” enter the following line:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://digistump.com/package_digistump_index.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;As shown in the following image:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/images/additionalurls.png&quot; alt=&quot;AdditionalURLs&quot; title=&quot;AdditionalURLs&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to &lt;em&gt;Tools&lt;/em&gt; -&amp;gt; &lt;em&gt;Boards&lt;/em&gt; -&amp;gt; &lt;em&gt;Boards manager&lt;/em&gt;:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/images/boardsmanager.png&quot; alt=&quot;BoardsManager&quot; title=&quot;BoardsManager&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;Select “&lt;em&gt;Contributed&lt;/em&gt;” from the drop-down menu and then install the “&lt;em&gt;Digistump AVR Boards&lt;/em&gt;” package:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/images/avrboards.png&quot; alt=&quot;AVRboards&quot; title=&quot;AVRboards&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Now go to &lt;em&gt;Tools&lt;/em&gt; -&amp;gt; &lt;em&gt;Boards&lt;/em&gt; -&amp;gt; &lt;em&gt;Digistump AVR Boards&lt;/em&gt; -&amp;gt; &lt;em&gt;Digispark (Default - 16.5 mhz)&lt;/em&gt;:&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;/blog/images/digistumpdefault.png&quot; alt=&quot;DigistumpDefault&quot; title=&quot;DigistumpDefault&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;test-if-it-works&quot;&gt;Test if it works&lt;/h2&gt;
&lt;p&gt;Create a new sketch and paste the following code:&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Creates a digisparked text file in the Desktop&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#include &quot;DigiKeyboard.h&quot;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Start&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Open &quot;Run&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOD_GUI_LEFT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Open &quot;cmd&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmd /k cd %UserProfile%/Desktop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Create the file&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo You have been digisparked :v &amp;gt; digisparked.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Close &quot;cmd&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exit&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendKeyStroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KEY_ENTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DigiKeyboard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Wait&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(;;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// To wait until the Digispark gets pulled out of the computer&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What this is going to do is simulate that you press WinKey+R, open “&lt;em&gt;cmd&lt;/em&gt;” and create a file on the desktop named digisparked.txt.&lt;/p&gt;

&lt;p&gt;Go to “&lt;em&gt;Tools&lt;/em&gt;” -&amp;gt; “&lt;em&gt;Port&lt;/em&gt;” and select the serial port that appears in the drop down menu. It usually is “&lt;em&gt;COM0&lt;/em&gt;” or “&lt;em&gt;COM1&lt;/em&gt;”.&lt;/p&gt;

&lt;p&gt;Now click the “&lt;em&gt;Upload&lt;/em&gt;” button and stick the &lt;em&gt;Digispark&lt;/em&gt; in a &lt;em&gt;USB&lt;/em&gt; port within the next 60 seconds. It will flash the code into the &lt;em&gt;Digispark&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Now you can plug your &lt;em&gt;Digispark&lt;/em&gt;, sit back, and get Digisparked!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/images/digisparkgif.gif&quot; alt=&quot;gif&quot; title=&quot;gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, it only takes about 2 seconds to get the job done.&lt;/p&gt;

&lt;h2 id=&quot;common-errors&quot;&gt;Common errors&lt;/h2&gt;
&lt;p&gt;If you get this error when compiling the code:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;DigiKeyboard.h: No such file or directory&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Your board was likely changed in the settings when the &lt;em&gt;Arduino IDE&lt;/em&gt; was reopened.&lt;/p&gt;

&lt;p&gt;Go back to “&lt;em&gt;Tools&lt;/em&gt;” -&amp;gt; “&lt;em&gt;Board&lt;/em&gt;” and select “&lt;em&gt;Digispark (Default - 16.5mhz)&lt;/em&gt;”&lt;/p&gt;

&lt;h2 id=&quot;extra&quot;&gt;Extra&lt;/h2&gt;
&lt;p&gt;There is a &lt;em&gt;GitHub&lt;/em&gt; project named &lt;a href=&quot;https://github.com/toxydose/Duckyspark&quot;&gt;“&lt;em&gt;Duckyspark&lt;/em&gt;”&lt;/a&gt; that converts &lt;em&gt;.duck&lt;/em&gt; scripts to the &lt;em&gt;.ino&lt;/em&gt; format that our &lt;em&gt;Digispark&lt;/em&gt; understands. It’s written in &lt;em&gt;python3&lt;/em&gt; and works well.&lt;/p&gt;

&lt;p&gt;The syntax is as shown below:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 Duckyspark_translator.py &amp;lt;rubber ducky file&amp;gt; &amp;lt;digispark file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With it, you can take any &lt;em&gt;.duck&lt;/em&gt; script and use it on your &lt;em&gt;Digispark&lt;/em&gt;!&lt;/p&gt;

&lt;h2 id=&quot;more-extra&quot;&gt;More extra&lt;/h2&gt;
&lt;p&gt;There is a &lt;em&gt;GitHub&lt;/em&gt; project named &lt;a href=&quot;https://github.com/mame82/duck2spark&quot;&gt;“&lt;em&gt;Duck2spark&lt;/em&gt;”&lt;/a&gt; that works somewhat like the previous tool, but this one takes the output of &lt;a href=&quot;https://github.com/hak5darren/USB-Rubber-Ducky/blob/master/Encoder/encoder.jar&quot;&gt;&lt;em&gt;Duckencoder&lt;/em&gt;&lt;/a&gt; (which supports different types of keyboard layouts) and converts it to an Arduino Sketch that you can upload to your &lt;em&gt;Digispark&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;even-more-extra&quot;&gt;Even more extra&lt;/h2&gt;
&lt;p&gt;If you want to go deep into this, here is a link to the “&lt;em&gt;digikeyboard.h&lt;/em&gt;” file in the official GitHub project of digistump:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/digistump/DigisparkArduinoIntegration/blob/master/libraries/DigisparkKeyboard/DigiKeyboard.h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is a link to the official “&lt;em&gt;HID usage tables&lt;/em&gt;”:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.usb.org/sites/default/files/hut1_21.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And last, this webpage contains lots of &lt;em&gt;.duck&lt;/em&gt; scripts that you can translate to &lt;em&gt;Digispark&lt;/em&gt; using the &lt;em&gt;Duckyspark&lt;/em&gt; tool:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://ducktoolkit.com/userscripts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">Do you want to have a Rubber Ducky but you don’t want to spend 50$ on it?</summary></entry></feed>